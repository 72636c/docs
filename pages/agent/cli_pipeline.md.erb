# buildkite-agent pipeline

The Buildkite Agentâ€™s `pipeline` command allows you to add and replace build steps in the running build. The steps are defined using YML or JSON and can be read from a file or streamed from the output of a script.

See the [Uploading Build Pipelines](/docs/pipelines/uploading-pipelines) guide for a step-by-step example.

<%= toc %>

## Uploading Pipelines

```
Usage:

   buildkite-agent pipeline upload <file> [arguments...]

Description:

   Allows you to change the pipeline of a running build by uploading either a
   JSON or YAML configuration file. If no configuration file is provided,
   we look for the file in the following locations:

   - .buildkite/pipeline.yml
   - .buildkite/pipeline.json

   You can also pipe build pipelines to the command, allowing you to create scripts
   that generate dynamic pipelines.

Example:

   $ buildkite-agent pipeline upload
   $ buildkite-agent pipeline upload my-custom-steps.json
   $ ./script/dynamic_step_generator | buildkite-agent pipeline upload

Options:

   --replace                                    Replace the rest of the existing pipeline with the steps uploaded. Jobs that are already running are not removed. [$BUILDKITE_PIPELINE_REPLACE]
   --job                                        The job that is making the changes to it's build [$BUILDKITE_JOB_ID]
   --agent-access-token                         The access token used to identify the agent [$BUILDKITE_AGENT_ACCESS_TOKEN]
   --endpoint "https://agent.buildkite.com/v3"  The Agent API endpoint [$BUILDKITE_AGENT_ENDPOINT]
   --no-color                                   Don't show colors in logging [$BUILDKITE_AGENT_NO_COLOR]
   --debug                                      Enable debug mode [$BUILDKITE_AGENT_DEBUG]
   --debug-http                                 Enable HTTP debug mode, which dumps all request and response bodies to the log [$BUILDKITE_AGENT_DEBUG_HTTP]
```

## Pipeline Format

The pipeline can be written as YAML or JSON, but YAML is more commonly for its readability. There are two top level properties you can specify:

* `env` - a hash of build-wide environment variables
* `steps` - an array of build steps to be run (a mix of script, `wait` and `block` steps)

## Command Steps

A *command* step runs a command on an agent. The following is the most simple *command* step:

```yml
- command: "command.sh"
```

The following step includes every configuration property for *command* steps:

```yml
- command: "tests.sh"
  name: "\:hammer\: Tests"
  branches: "master"
  env:
    FOO: "bar"
  agents:
    npm: "true"
    queue: "tests"
  artifact_paths: "logs/**/*;coverage/**/*"
  parallelism: 1
  concurrency: 1
  concurrency_group: "serial_tests"
  timeout_in_minutes: 60
```

## Waiter Steps

A *waiter* step waits for all previous steps to complete before continuing, for example:

```yml
- command: "command.sh"
- wait
- command: "echo The command passed"
```

## Click to Unblock Steps

A *block* step will pause the pipeline and wait for a team member to unblock it (via the web or the API).

```yml
- command: "command.sh"
- block
- command: "deploy.sh"
```

Changing the label of the step in the pipeline can be done by setting it as the value of the *block* step:

```yml
- command: "command.sh"
- block: "\:rocket\: Release"
- command: "deploy.sh"
```

You can also scope the *block* step to a set of branches. In the following
example, the "Deploy" button and the subsequent `deploy.sh` script will only be
available for builds that run on the `master` branch:

```yml
- command: "test.sh"
- block: "\:rocket\: Release"
  branches: "master"
- command: "deploy.sh"
  branches: "master"
```

Adding the `fields` attribute to a *block* step allows you to add custom fields to the prompt when you click on a *block* step:

```yml
- block: Release
    prompt: Fill out the details for release
    fields: 
      - text: Release notes
        key: release-notes
        hint: Enter your release notes here \:sparkles\:
      - text: Release name
        key: release-name
        optional: true
      - select: Release type
        key: release-type
        default: Major
        options:
          - Major
          - Minor
          - Patch
```

You can test out a live example by adding our sample pipeline with an unblock prompt step to your existing Buildkite organisation: 

<a class="inline-block" href="/new?template=https://github.com/buildkite/unblock-prompt-example" target="__blank"><img src="https://buildkite.com/button.svg" alt="Add Unblock Prompt Example to Buildkite" class="no-decoration" width="160" height="30"></a>

## block attributes

Attributes that are available to describe block steps in your `pipeline.yml`:

<table>
  <tr>
    <th>Attribute</th>
    <th>Example</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>name</td>
    <td>Release \:rocket\:</td>
    <td>the text that is displayed for the step in the pipeline</td>
  </tr>
  <tr>
    <td>branches</td>
    <td>master</td>
    <td>
      scope the block step to a set of branches <br>
      make everything after the block step only available to builds that occur on a specific branch
    </td>
  </tr>
  <tr>
    <td>prompt</td>
    <td>To continue with your deploy, unblock this step by clicking continue</td>
    <td>the text that is displayed in the prompt when you click the button to unblock your step</td>
  </tr>
  <tr>
    <td>fields</td>
    <td>- text <br> - select</td>
    <td>there are only two options for field types, `text` or `select`</td>
  </tr>
</table>


## fields attribute properties

Properties available to describe the `field` attribute inside a block step in your `pipeline.yml`:

<table>
  <tr>
    <th>Attribute</th>
    <th>Example</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>key</td>
    <td>notify-team</td>
    <td>identifies the field for later access via the buildkite-agent meta-data command, this field is required</td>
  </tr>
  <tr>
    <td>hint</td>
    <td>Please only select one team to notify</td>
    <td>text that is displayed directly under the field label</td>
  </tr>
  <tr>
    <td>optional</td>
    <td>true</td>
    <td>as all fields are required by default, add this attribute to make your field optional</td>
  </tr>
  <tr>
    <td>default</td>
    <td>Ops</td>
    <td>placeholder text to display in the text box, or the option that will be pre-filled in your select field</td>
  </tr>
  <tr>
    <td>options</td>
    <td>- Support<br>
    - Engineering<br>
    - Ops</td>
    <td>only applicable to `select` fields, these populate the key/value pairs for radio buttons or a dropdown list</td>
  </tr>
</table>


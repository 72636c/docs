
# Buildkite Agent Plugins

Plugins provide a way to extend the functionality that Buildkite natively offers. They act as a external repository of [Hooks][hooks] that are referenced from your `pipeline.yml` file, downloaded and run as part of your builds.

Plugins can be hosted on GitHub, BitBucket or a private git repository, and are automatically fetched as required.

Buildkite offers a [collection of useful plugins][Buildkite Plugins]
to get you started, including a [docker-compose plugin] and a plugin for [secure secrets storage][s3-secrets plugin] on Amazon S3.

<%= toc %>

## Using a plugin

Plugins are only available for [pipelines] using `pipeline.yml` files.

Plugins can be used in two ways:

* as a standalone step, performing an operation
* as a library, making commands available to that step's script 

An example of what a plugin might look like in your code:

```yml
steps:
  - plugins:
      detect-clowns#v2.0.0: ~
```

This example will install the `buildkite-plugins/detect-clowns-buildkite-plugin` when your pipeline runs this build step.

Plugins are automatically fetched from where they are hosted, based on the name of the project. See [Plugin sources] for how you can host your own.

A real-life example is the [docker-compose plugin]. It provides an integration
with docker-compose that assists with running your builds within a docker environment:

```yml
steps:
  # Prebuild the app image, upload it to a registry for later steps
  - name: "Docker Build"
    plugins:
      docker-compose#v1.3.2:
        build: app
        image-repository: index.docker.io/org/repo

  - wait

  # Use the app image built above to run concurrent tests
  - name: "Docker Test %n"
    command: test.sh
    parallelism: 25
    plugins:
      docker-compose#v1.3.2:
        run: app
```

In the 2.x agent, this approach was only possible by either using the
docker environment variables, or writing a custom script.

## Plugin sources

If you refer to a plugin just by name (say `detect-clowns`), it defaults to
https://github.com/buildkite-plugins/detect-clowns-buildkite-plugin. If you used `myorg/detect-clowns` it would refer to https://github.com/myorg/detect-clowns-buildkite-plugin.

You can also use a fully qualified git repository name like `https://github.com/buildkite-plugins/detect-clowns-buildkite-plugin.git` or `git@github.com:foo/bar.git#v1.3`, which
lets you refer to your own private git repositories. Branches, tags and commits
are all valid after the `#`.

We recommend that plugins be pinned to a specific version to prevent behaviour
changing unexpectedly. This is done with a git tag of `vX.X.X`.

## Developing a plugin

The best place to get started is the [Buildkite Plugins] repository. You can also find third-party plugins with the `buildkite-agent` tag [on GitHub][third party plugins].

At Buildkite, our plugins are predominantly shell scripts, so we've created a [plugin tester] docker image that simplifies writing BATS tests and getting your plugin tested (so meta).

### Anatomy of a plugin

Plugins are essentially a collection of hooks with extra configuration. The agent parses the plugin configuration and passes it on to the plugin in a slightly normalized form, both as JSON or environment variables.

This means that you can write a plugin as a shell script, or as a binary.

A minimal plugin has a `plugin.json` at it's root:

```json
{
  "name": "docker",
  "description": "Runs your build steps in Docker containers",
  "author": "@buildkite",
  "public": true,
  "requirements": ["docker"]
}
```

And then hook scripts under `hooks/`. A good example is the [docker plugin], which runs a command within a docker container.

The pipeline invocation of this plugin looks like:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      docker#v1.0.0:
        image: "node:7"
        workdir: /app
```

The logic of the (simplified) [command hook][hooks] script in `hooks/command`:

```bash
#!/bin/bash
set -euo pipefail

echo "--- Running ${BUILDKITE_COMMAND} in ${BUILDKITE_PLUGIN_DOCKER_IMAGE}"

docker run -it --rm \
  --volume "$PWD:${BUILDKITE_PLUGIN_DOCKER_WORKDIR}" \
  --workdir"${BUILDKITE_PLUGIN_DOCKER_WORKDIR}" \
  "${BUILDKITE_PLUGIN_DOCKER_IMAGE}" bash -c "${BUILDKITE_COMMAND}"
```

The agent parses the plugin block and passes the parameters through to the script as environment variables in the form `BUILDKITE_PLUGIN_{NAME}_{KEY}`. If a list is provided then `BUILDKITE_PLUGIN_{NAME}_{KEY}_{IDX}`.

Plugins are also able to offer `command` and `environment` hooks, which aren't allowed in per-project hooks. You can use these to change how plugins execute commands.

## Security and Reliability

Plugins introduce a third-party dependency in your pipeline. They provide a way to introduce executable code into your pipeline beyond scripts in your repository and access to the `pipeline.yml`.

Recommended security practices:

 * Always pin to a particular version of the plugin, e.g. `docker-compose#287293c4`. You can refer to any git ref. The agent will check this out the first time it encounters it and then re-use that checked out code.

 * Follow the [Unofficial Bash Strict Mode] and check your work with [shellcheck].

 * Apply special care to avoid executing arbitrary code passed in to plugins by config. As these are just environment variables, anything that can set environment variables can mess with plugin configuration.

For particularly high-security setups, you can disable plugins selectively by removing them from the `BUILDKITE_PLUGINS` variable in your `environment` hook, or run agents with the `--no-plugins` flag.

## We love feedback

Agent plugins are still new, and we are evolving them as we learn more. We'd love feedback on how you use them and how we might make them better.

[pipelines]: https://buildkite.com/docs/pipelines/defining-steps
[hooks]: https://buildkite.com/docs/agent/v3/hooks
[standard environment variables]: https://buildkite.com/docs/builds/environment-variables#provided-by-buildkite
[Unofficial Bash Strict Mode]: http://redsymbol.net/articles/unofficial-bash-strict-mode/
[shellcheck]: https://github.com/koalaman/shellcheck
[docker plugin]: https://github.com/buildkite-plugins/docker-buildkite-plugin
[docker-compose plugin]: https://github.com/buildkite-plugins/docker-compose-buildkite-plugin
[s3-secrets plugin]: https://github.com/buildkite-plugins/s3-secrets-buildkite-plugin
[Buildkite Plugins]: https://github.com/buildkite-plugins
[third party plugins]: https://github.com/search?q=topic%3Abuildkite-plugin&type=Repositories
[plugin tester]: https://github.com/buildkite-plugins/plugin-tester
[Plugin sources]: https://buildkite.com/docs/agent/v3/plugins#plugin-sources

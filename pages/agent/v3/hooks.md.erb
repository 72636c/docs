# Buildkite Agent Hooks

Agent hooks can be used to extend or override the built-in behaviours of the
Buildkite Agent and Bootstrap binaries.

Hooks can be defined globally on your agent hosts, in your repository, or from
[Plugins](/docs/plugins). For example, you could create a global `checkout` hook
which speeds up a fresh `git clone` on a new build machine, a repository
`pre-command` hook which sets up repository-specific environment variables, or a
plugin `environment` hook which exports secret API keys as environment
variables.

There are two categories of hook:

* Lifecycle hooks
* Job hooks

Lifecycle hooks are **executed** by the Buildkite Agent as part of the agent
lifecycle. For example, the `pre-bootstrap` hook is executed before starting a
per-job bootstrap process, and the `agent-shutdown` hook is executed before the
agent process terminates.

Job hooks are **sourced** by the Buildkite Bootstrap in the different job
phases. They are run in a per-job shell environment, and any exported
environment variables are carried to the job’s subsequent phases and hooks. For
example, the `environment` hook can modify or export new environment variables
for the job’s subsequent phases and hooks.

In July 2021 we changed how we refer to Agent Hooks to differentiate between the
global file system location that hooks are defined in, and the feature which
covers hooks for both the Agent and Bootstrap processes.

{:toc}

## Lifecycle hooks

<table>
  <thead>
    <tr>
        <th>Hook</th>
        <th>Location Order</th>
        <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="white-space: nowrap"><code>pre-bootstrap</code></td>
      <td style="white-space: nowrap">Global</td>
      <td>
        <p>Executed before any job is started. Useful for <a href="/docs/agent/v3/securing#strict-checks-using-agent-hooks">adding strict checks</a> before jobs are permitted to run.</p>
        <p>The proposed job command and environment is written to a file and
        the path to this file provided in the <code>BUILDKITE_ENV_FILE</code>
        environment variable. Use the contents of this file to determine whether
        to permit the job to run on this agent.</p>
        <p>If the <code>pre-bootstrap</code> hook terminates with an exit code
        of <code>0</code>, the job is permitted to run. Any other exit code
        results in the job being rejected, and job failure being reported to the
        Buildkite API.</p>
        </td></tr>
    <tr>
      <td style="white-space: nowrap"><code>agent-shutdown</code></td>
      <td style="white-space: nowrap">Global</td>
      <td>Executed when the agent shuts down. Useful for performing cleanup
      tasks for the entire agent, outside of the job lifecycle.</td></tr>
  </tbody>
</table>

### Creating lifecycle hooks

Lifecycle hooks can be written in the programming language of your choice and
are executed by the Buildkite Agent. See the documentation for each lifecycle
hook for details on the interface between the Buildkite Agent and the
Lifecycle hook.

Lifecycle hooks can only be defined in the [global hooks](#agent-hook-locations-global-hooks)
directory.

## Job hooks

The following is a complete list of available job hooks, and the order in which
they are run as part of each job:

<table>
  <thead>
    <tr>
        <th>Hook</th>
        <th>Location Order</th>
        <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="white-space: nowrap"><code>environment</code></td>
      <td style="white-space: nowrap">Global, Plugin</td>
      <td>Runs before all other hooks. Useful for <a href="/docs/pipelines/secrets#storing-secrets-in-environment-hooks">exposing secret keys</a>.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-checkout</code></td>
      <td style="white-space: nowrap">Global, Plugin</td>
      <td>Runs before checkout.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>checkout</code></td>
      <td style="white-space: nowrap">Plugin, Global</td>
      <td>Overrides the default <code>git checkout</code> behavior.<br><em>Note:</em> As of Agent v3.15.0, if multiple checkout hooks are found, only the first will be run.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-checkout</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after checkout.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-command</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before the build command.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>command</code></td>
      <td style="white-space: nowrap">Plugin, Repository, Global</td>
      <td>Overrides the default command running behavior. If multiple command hooks are found, only the first will be run.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-command</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after the command.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-artifact</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before artifacts are uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-artifact</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after artifacts have been uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-exit</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before the job finishes. Useful for performing cleanup tasks.</td></tr>
  </tbody>
</table>

### Creating job hooks

Job hooks are shell scripts you can use to run commands and export environment
variables. Job hooks have access to all the standard
[Buildkite environment variables](/docs/pipelines/environment-variables).

Job hooks are copied to `$TMPDIR` directory and *sourced* by the default shell
on the Agent that is running the build. This has a few implications:

* `$BASH_SOURCE` contains the location the hook is sourced from
* `$0` contains the location of the copy of the script that is running from `$TMPDIR`
* the shebang line of the hook script has no effect

To write job hooks in another programming language, you need to execute them
from within the shell script, and explicitly pass any Buildkite environment
variables you need to the script when you call it.

The following is an example of a custom `environment` hook which exports a
GitHub API key for the pipeline’s release build step:

```bash
set -eu
echo '--- \:house_with_garden\: Setting up the environment'

export GITHUB_RELEASE_ACCESS_KEY='xxx'
```

## Job hooks on Windows

Agents running on Windows require hook files to have either:

* A `.bat` extension, and be written in [Windows Batch](https://en.wikipedia.org/wiki/Batch_file), or
* Access to <a href="/docs/agent/v3/windows#git-for-windows">Git for Windows</a>, which includes bash

An example of a windows `environment.bat` hook:

```batch
@ECHO OFF
ECHO "--- \:house_with_garden\: Setting up the environment"
SET GITHUB_RELEASE_ACCESS_KEY='xxx'
```

## Agent Hook Locations

Agent hooks can be defined in three locations:

* Global hooks - these exist on the agent file system in a directory created by
your agent installer. The global hooks directory can define both Lifecycle and
Job hooks. The agent will run the global job hooks for every job it receives,
from any pipeline.
* Repository hooks - these exist in your pipeline repository’s
`.buildkite/hooks` directory and can define job hooks. The agent will run the
repository hooks for every pipeline that uses the repository that defines them.
* Plugin hooks - these are provided by any [plugins](/docs/plugins) you’ve
defined in your `pipeline.yml` and can define job hooks. The agent will run any
plugin hooks defined by the step’s [plugins](plugins) for every job it receives.

### Global hooks

Every agent installer creates a global hooks directory containing a set of
sample hooks. You can find the location of your agent hooks directory in your
platform’s installation documentation.

To get started with global hooks copy the relevant example script and remove the
`.sample` file extension.

See [lifecycle hooks](#lifecycle-hooks) and [job hooks](#job-hooks) for the hook
types that can be defined in the global hooks directory.

### Repository hooks

Repository hooks allow you to execute repository-specific scripts. Repository
hooks live alongside your repository’s source code under the `.buildkite/hooks`
directory.

To get started, create a shell script in `.buildkite/hooks` named
`post-checkout`. It will be sourced and run after your repository has been
checked out as part of every job for any pipeline that uses this repository.

You can define any of the [job hooks](#job-hooks) whose `Order` includes
*Repository*.

### Plugin hooks

Plugin hooks allow plugins you’ve defined in your Pipeline Steps to override
default behavior.

See the [plugin documentation](/docs/plugins) for how to implement plugin hooks
and [job hooks](#job-hooks) for the list of hook types that a plugin can define.

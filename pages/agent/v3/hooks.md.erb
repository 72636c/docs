# Buildkite Agent Hooks

Agent hooks can be used to extend or override the built-in behaviours of the
Buildkite Agent.

Hooks can be configured on your agent hosts, in your repository, or from
Pipeline Plugins. For example, you could create a global `checkout` hook which
speeds up a fresh `git clone` on a new build machine, a repository `pre-command`
hook which sets up repository-specific environment variables, or a plug-in
`environment` hook which exports secret API keys as environment variables.

{:toc}

## Types of hooks

There are two types of hook:

* Lifecycle hooks
* Step hooks

Lifecycle hooks are **executed** as part of the agent lifecycle. For example,
the `pre-bootstrap` hook is executed before starting the per-job bootstrap
process, and the `agent-shutdown` hook is executed before the agent process
terminates.

Step hooks are **sourced** as part of each Buildkite Job. Step hooks are run in
a per-job shell environment, and any exported environment variables are carried
to subsequent phases and hooks for a given job. For example, the `environment`
hook can modify or export new environment variables for the subsequent job
phases and hooks.

## Agent Hook Locations

There are three locations that agent hooks are found:

* Global hooks - these exist on the agent file system in a directory created by
your agent installer and can define both Lifecycle and Step hooks. These step
hooks are run for every job the agent receives, from any pipeline.
* Repository hooks - these exist in your pipeline repository’s
`.buildkite/hooks` directory and can define step hooks.
* Plugin hooks - these are provided by any [plugins](/docs/plugins) you’ve
defined in your `pipeline.yml` and can define step hooks.

### Global hooks

Every agent installer creates a global hooks directory containing a set of
sample hooks. You can find the location of your agent hooks directory in your
platform’s installation documentation.

To get started with agent hooks copy the relevant example script and remove the
`.sample` file extension.

### Repository hooks

Repository hooks allow you to execute repository-specific scripts. Repository
hooks live alongside your repository’s source code under the directory
`.buildkite/hooks`.

To get started, create a shell script in `.buildkite/hooks` named
`post-checkout`. It will be sourced and run every build, after the Agent checks
your repository out. You can also use one of the other available *Repository*
hooks, according to when you want your custom script to run.

### Plugin hooks

Plugin hooks allow plugins you’ve defined in your Pipeline to override default
behavior.

See the [plugin documentation](/docs/plugins) for how to implement plugin hooks.

## Available Lifecycle hooks

<table>
  <thead>
    <tr>
        <th>Hook</th>
        <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="white-space: nowrap"><code>pre-bootstrap</code></td>
      <td>Runs before a step’s job is started. Useful for <a href="/docs/agent/v3/securing#strict-checks-using-agent-hooks">adding strict checks</a> before jobs are permitted to run.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>agent-shutdown</code></td>
      <td>Runs when each agent shuts down. Useful for performing cleanup tasks
      for the entire agent, outside of the job lifecycle.</td></tr>
  </tbody>
</table>

## Available Step hooks

The following is a complete list of available step hooks, and the order in which
they are run as part of each job:

<table>
  <thead>
    <tr>
        <th>Hook</th>
        <th>Order</th>
        <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="white-space: nowrap"><code>environment</code></td>
      <td style="white-space: nowrap">Global, Plugin</td>
      <td>Runs before all other hooks. Useful for <a href="/docs/pipelines/secrets#storing-secrets-in-environment-hooks">exposing secret keys</a>.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-checkout</code></td>
      <td style="white-space: nowrap">Global, Plugin</td>
      <td>Runs before checkout.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>checkout</code></td>
      <td style="white-space: nowrap">Plugin, Global</td>
      <td>Overrides the default <code>git checkout</code> behavior.<br><em>Note:</em> As of Agent v3.15.0, if multiple checkout hooks are found, only the first will be run.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-checkout</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after checkout.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-command</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before the build command.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>command</code></td>
      <td style="white-space: nowrap">Plugin, Repository, Global</td>
      <td>Overrides the default command running behavior. If multiple command hooks are found, only the first will be run.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-command</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after the command.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-artifact</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before artifacts are uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>post-artifact</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs after artifacts have been uploaded, if an artifact upload pattern was defined for the job.</td></tr>
    <tr>
      <td style="white-space: nowrap"><code>pre-exit</code></td>
      <td style="white-space: nowrap">Global, Repository, Plugin</td>
      <td>Runs before the job finishes. Useful for performing cleanup tasks.</td></tr>
  </tbody>
</table>

## Creating Lifecycle hooks

Agent hooks are executed and can be written in any programming language.

## Creating Step hooks

Step hooks are shell scripts you can use to run commands and export environment
variables. Hooks have access to all the standard [Buildkite environment variables](/docs/pipelines/environment-variables).

Step hooks are copied to `$TMPDIR` directory and *sourced* by the default shell
on the Agent that is running the build, which has a few implications:

* `$BASH_SOURCE` contains the location the hook is sourced from
* `$0` contains the location of the copy of the script that is running from `$TMPDIR`
* the shebang line of the hook script has no effect

To write step hooks in another programming language, you need to call them from
within the shell script, and explicitly pass any Buildkite environment variables
you need to the script when you call it.

The following is an example of a custom `environment` hook which exports a
GitHub API key for the pipeline’s release build step:

```bash
set -eu
echo '--- \:house_with_garden\: Setting up the environment'

export GITHUB_RELEASE_ACCESS_KEY='xxx'
```

## Step hooks on Windows

Agents running Windows require hook files to have either:

* A `.bat` extension, and be written in [Windows Batch](https://en.wikipedia.org/wiki/Batch_file), or
* Access to <a href="/docs/agent/v3/windows#git-for-windows">Git for Windows</a>, which includes bash

An example of a windows `environment.bat` hook:

```batch
@ECHO OFF
ECHO "--- \:house_with_garden\: Setting up the environment"
SET GITHUB_RELEASE_ACCESS_KEY='xxx'
```

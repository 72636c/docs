# Auto Scaling mac1.metal instances

Run your builds on AWS `mac1.metal` using our [CloudFormation template](https://github.com/buildkite/elastic-mac-for-aws).
This template creates an Auto Scaling group, Launch Template, and Host Resource Group
suitable for maintaining a pool of EC2 `mac1.metal` instances that run the
Buildkite Agent. These agents can be used to run Buildkite Pipelines and build
Xcode based software projects for macOS, iOS, iPadOS, tvOS, and watchOS.

As you must prepare and supply your own AMI for this template, macOS support has
**not** been incorporated into the Elastic CI Stack for AWS.

Using an Auto Scaling group for your instances ensures booting your macOS
Buildkite Agents is repeatable, and provides automatic instance replacement when
hardware failures occur.

## Prerequisites

You should have familiarity with:

* AWS VPCs
* AWS EC2 AMIs
* macOS GUI

You must also choose an AWS Region with `mac1.metal` instances available. See
[Amazon EC2 Mac Instances](https://aws.amazon.com/ec2/instance-types/mac/) and
[Amazon EC2 Dedicated Hosts Pricing](https://aws.amazon.com/ec2/dedicated-hosts/pricing/)
for details on which regions have `mac1.metal` dedicated hosts.

See also the [Amazon EC2 Mac instances User Guide](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-mac-instances.html)
for more details on AWS EC2 Mac instances.

## Choose a VPC Layout

Before deploying this template you must choose a VPC subnet design, and which
VPC security groups your instances should belong to.

Depending on your threat model, you may find running instances in your default
VPC’s public subnets with a public IP address suitable. Otherwise, you may wish
to explore options like separate Public/Private subnets and a NAT Gateway, and
using a Bastion or VPN to access the instances over SSH and VNC.

In supported regions, `mac1.metal` dedicated hosts may not be available in
every Availability Zone. Consider using a subnet in every Availability Zone to
maximise the pool of instances available to boot from.

You also need to configure or define the VPC Security Groups your instance
network interfaces should belong to. At a minimum, inbound SSH access is
required to set up your initial template AMI.

## Build an AMI

Before deploying this template, you must create a template AMI that can be
horizontally scaled across multiple instances.

1. Reserve a [AWS mac1.metal](https://aws.amazon.com/ec2/instance-types/mac/)
Dedicated Host.
1. Boot a macOS instance using your desired AMI on the Dedicated Host.
1. Configure instance VPC subnets, security groups, and key pairs so that you
can access the instance.
1. Using an SSH or SSM session:
	* Set a password for the ec2-user using `sudo passwd ec2-user`
	* Enable screen sharing using `sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -access -on -restart -agent -privs -all`
1. Using a VNC session:
	1. Sign in as the `ec2-user`
	1. Enable *Automatic login* for the ec2-user in *System Preferences* > *Users & Accounts* > *Login Options*
	1. Disable *Require password* in *System Preferences* > *Security & Privacy* > *General*
1. Install your required version of Xcode, and ensure you launch Xcode at least
once so you are presented with the EULA prompt.
1. Using the AWS EC2 Console, create an AMI from your instance.

You do not need to install the `buildkite-agent`, it is automatically installed
by the Launch Template `UserData` script.

## Associate your AMI with a Customer managed license in AWS License Manager

To launch an instances using a Host Resource Group, the instance AMI must be
associated with a Customer managed license in *AWS License Manager*.

Using the AWS Console, open the *AWS License Manager* and navigate to
*Customer managed licenses*. Create a new Customer managed license, enter a
descriptive name and select a License Type of `Cores`.

Once your Customer managed license has been saved, open the detail view for your
license. Open the *Associated AMIs* tab and choose *Associate AMI*. From the
list of *Available AMIs*, select your macOS AMIs and then click *Associate*.

## Deploy the CloudFormation template

Using the VPC and AMI prepared earlier, prepare values for the following
required parameters:

* `ImageId` from your AMI set up
* `RootVolumeSize`
* `Subnets` from your VPC set up
* `SecurityGroupIds` from your VPC set up
* `IamInstanceProfile` if accessing AWS services from your builds, provide an Instance Profile ARN with an appropriate IAM role attached
* `BuildkiteAgentToken` an Agent Token for your [Buildkite Organization](http://buildkite.com/organizations/-/agents)
* `BuildkiteAgentQueue` the Buildkite Queue your Pipeline Steps target

There are also optional parameters to configure the size of the Auto Scaling
Group:

* `MinSize` defaults to 0
* `MaxSize` defaults to 3

The default AWS Limit for `mac1.metal` is 3 dedicated hosts per account region. If
you require more than 3 instances, request an increased limit in the *AWS
Service Quotas Dashboard*.

### Deploy Using the AWS Console

Use the launch button below to Create a CloudFormation stack from the latest
version of our template:

<a href="https://console.aws.amazon.com/cloudformation/home#/stacks/new?stackName=buildkite-mac&templateURL=https://s3.amazonaws.com/buildkite-serverless-apps-us-east-1/elastic-mac/template/latest.yml"><%= image "launch-stack.svg", alt: "Launch stack button" %></a>

Ensure the selected region in the top menu bar matches the region of your VPC
and AMI resources.

Give your stack a unique name, and fill in the required parameters.

### Deploy Using the AWS CLI

To deploy using the AWS CLI, save your parameters in a `.parameters.json` file
and run the following commands:

```
$ cat .parameters.json
> [
	{
		"ParameterKey": "ImageId",
		"ParameterValue": "ami-0c3a7d0c15048b6b5"
	},
	{
		"ParameterKey": "RootVolumeSize",
		"ParameterValue": "250"
	},
	{
		"ParameterKey": "Subnets",
		"ParameterValue": "subnet-f3e72abb,subnet-f23fe294"
	},
	{
		"ParameterKey": "SecurityGroupIds",
		"ParameterValue": "sg-a09db9d7"
	},
	{
		"ParameterKey": "BuildkiteAgentQueue",
		"ParameterValue": "mac"
	},
	{
		"ParameterKey": "BuildkiteAgentToken",
		"ParameterValue": "[redacted]"
	}
]

$ make
> sed "s/%v/v0.0.1-9-g1790b0d/" <template.yml >build/template.yml

$ aws cloudformation deploy --stack-name buildkite-mac --region YOUR_REGION --template-file build/template.yml --parameters-override file:///$PWD/.parameters.json
```

See the [AWS CloudFormation Deploy CLI documentation](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/cloudformation/deploy/index.html)
for more details.

## Starting your Buildkite Agents

Once you have successfully deployed the template, use the deployed stack’s
*Resources* tab to find the `AutoScaleGroup` and open the *Physical ID* link.
*Edit* the selected Auto Scaling group, and set the *Desired capacity* to the
number of instances you require.

The Auto Scaling group will automatically provision Dedicated Hosts using the
Host Resource Group and boot instances on them. The Launch Template’s `UserData`
script will install, configure, and start the Buildkite Agent.

`mac1.metal` instances are slow to boot and slow to terminate. If want to match
your *Desired capacity* to your workload, consider using an Auto Scale group
*Scheduled action*.

## Frequently Asked Questions

### My Auto Scaling group doesn’t launch any instances

If your ASG does not launch any instances, check the ASG Activity to see what
error is occurring.

It may be that there are no `mac1.metal` instances available in the region, or
Availability Zones of your VPC subnets. This error is likely transient, wait for
some more ASG scale out attempts to see if the error persists.

It may be that your Launch Template’s AMI is not associated with a Customer
Managed License in AWS License Manager. Ensure you [associate your AMI](#associate-your-ami-with-a-customer-managed-license-in-aws-license-manager)
and any new AMIs with a Customer managed license. Ensure the License
Configuration has a License Type of `Core`.

### My instances don’t start the buildkite-agent

Ensure your AMI has been [configured to auto-login as the ec2-user](#build-an-ami)
in the GUI. To allow your pipelines to use Xcode and the iOS Simulator the
Buildkite Agent launchd job configuration requires an `Aqua` session type.

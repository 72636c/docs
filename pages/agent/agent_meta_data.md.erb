# Buildkite Agent Meta-data

Each agent has meta-data tags which can be used to group and target the agents in your build pipelines. This way you're free to dynamically scale your agents and target them based on their capabilities rather than maintaining a static list.

<%= toc %>

## Setting Metadata

To set an agentâ€™s meta-data you can set it in the configuration file:

```
meta-data="docker=true,ruby2=true"
```

or with the `--meta-data` command line flag:

```
buildkite-agent start --meta-data "docker=true" --meta-data "ruby2=true"
```

or with the `BUILDKITE_AGENT_META_DATA` an environment variable:

```
env BUILDKITE_AGENT_META_DATA="docker=true,ruby2=true" buildkite-agent start
```

## Agent Targeting

Once you've started agents with metadata you can target them in the build pipeline using agent query rules.

You can match agents using exact metadata values:

<%= image 'agent-selector-matching-1.png', size: '553x353', alt: 'Agent Selector showing a single match' %>

or using the `*` wildcard value:

<%= image 'agent-selector-matching-2.png', size: '553x353', alt: 'Agent Selector showing a single match' %>

## Isolating Agents With Queues

All agents include an extra default metadata tag of `queue=default`. If you override this value (e.g. `queue=new-build-machines`) the agent will be protected from running any jobs that don't explicitly include this new queue in it's query rule.

A common use for queues is deployment agents. If you wanted to ensure a deployment agent only ran deployment jobs (and never CI jobs) you could start the agent with meta-data `queue=deploy` and this would ensure that it doesn't match any jobs by default:

<%= image 'agent-selector-2.png', size: '553x353', alt: 'Agent Selector showing all but the deploy selected' %>

To target the deployment agent you'd need to explicitly add `queue=deploy` to the query rule:

<%= image 'agent-selector.png', size: '553x353', alt: 'Agent Selector showing only the deploy selected' %>

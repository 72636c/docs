# Using plugins

You can use plugins in pipeline steps that have been defined in YAML - either in your `pipeline.yml` file in your repository, or in the beta YAML editor in Buildkite.

Plugins can be a private git repository, a public repository, a local repository alongside your code, or locally on an Agent's filesystem. 

<%= toc %>

## Adding a plugin to your pipeline

To add a plugin to a [command step](/docs/pipelines/command-step), use the `plugins` attribute. 

This attribute accepts an array, so you can add as many plugins as you require in each step. The plugins will be run in the order you put them in the array. 

In the example below, the `shellcheck` `command` hook will run, followed by the commands `yarn install && yarn run test`. As plugins are collections of hooks, the plugin will be run first before any defined commands or scripts. 

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - shellcheck#v1.1.2:
          files: scripts/*.sh
```

In the example below, the `shellcheck` plugin will run, followed by the `docker` plugin, and finally the commands `yarn install && yarn run test`.

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - shellcheck#v1.1.2:
          files: scripts/*.sh
      - docker#v3.3.0:
          image: node
          workdir: /app
```

You can also add steps that only run plugins without other commands. This syntax is usually used for actions like pre-building a docker image for use in later steps. 

When you don't include commands or a script, the step will run the plugin hooks alone on the agent that accepts the job. Athough there's no 'command' attribute, this is still considered a command step, so you can use any of the other attributes available on command steps.

The below example uses the [`docker-login` plugin]() to authenticate with the docker registry, then the [`docker compose` plugin]() to build the `app` image. The `app` image can then be used by later steps in the pipeline.  

```yml
steps:
  - plugins:
      - docker-login#v2.0.1:
          username: xyz
      - docker-compose#v3.0.3:
          build: app
          image-repository: index.docker.io/myorg/myrepo
```

If you are using Agent hooks as well as plugins, some hook types will run the Agent hooks before the plugin hooks. For a detailed table describing each hook type and the order it is run, see the [Agent Hooks guide](/docs/agent/v3/hooks#available-hooks).

## Configuring plugins

Plugins can be configured on [command steps](/docs/pipelines/command-step) in your `pipeline.yml` [pipeline definitions](/docs/pipelines/defining-steps). When a command step with a plugin is run on an agent, the plugin is cloned from its git repository, and its hooks are executed, passing in any configuration you've specified in your pipeline.yml.

The simplest plugin is one that accepts no configuration, such as the [Library Example plugin](https://github.com/buildkite-plugins/library-example-buildkite-plugin), which updates your `$PATH` to include the `bin` directory that contains the additional commands to expose to build jobs:

```yml
steps:
  - label: "\:clown_face\:"
    plugins:
      - library-example#v1.0.0: ~
```

More commonly, plugins accept various configuration options. For example, the [Docker plugin] can be configured to use a Docker image to run your command:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - docker#v3.3.0:
          image: node
          workdir: /app
```

More advanced plugins, such as [Docker Compose plugin], are designed to be used multiple times in a pipeline:

```yml
steps:
  # Prebuild the app image, upload it to a registry for later steps
  - label: "\:docker\: Build"
    plugins:
      - docker-compose#v3.0.3:
          build: app
          image-repository: index.docker.io/org/repo

  - wait

  # Use the app image built above to run concurrent tests
  - label: "\:docker\: Test %n"
    command: test.sh
    parallelism: 25
    plugins:
      - docker-compose#v3.0.3:
          run: app
```

## Plugin sources

There are different ways to describe the location of your plugins:

  - The name of the plugin
  - The GitHub organization + the name of the plugin
  - A fully qualified Git URL 

Always specify a plugin version tag after your plugin (e.g. `v1.2.3`) to prevent behavior changing unexpectedly and to prevent stale checkouts of plugins on your agent machines. Branches, tags and commit hashes are all valid version descriptors.

### Plugin name

When you use the plugin name only, the Agent will assume you're talking about a Buildkite plugin in the `buildkite-plugins` GitHub repository. The source format will default to `https://github.com/buildkite-plugins/<name>-buildkite-plugin`. 

For example, you can refer to the Docker plugin by the name `docker`:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - docker#v3.3.0:
          image: node
          workdir: /app
```

The above `pipeline.yml` will resolve the following plugin source:

```yml
https://github.com/buildkite-plugins/docker-buildkite-plugin
```

### Plugin organization and name

When you refer to a plugin using an organization name as well as the plugin name, it will assume that it's hosted on GitHub.com.

For example, using the plugin `my-org/docker` will resolve the source with the specified GitHub organization:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - my-org/docker#v3.3.0:
          image: node
          workdir: /app
```

```yml
https://github.com/my-org/docker-buildkite-plugin
```

### Fully qualified Git URL

You can use fully qualified Git URLs instead of names to refer to plugins that arenâ€™t on GitHub, or that live in private Git repositories that are only accessible to your agents. 

For example:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - https://github.com/my-org/my-plugin.git#v1.0.0: ~
      - ssh://git@github.com/my-org/my-plugin.git#v1.0.0: ~
      - file:///a-local-path/my-plugin.git#v1.0.0: ~
```

# Using plugins

## adding a plugin to your pipeline (as a step/in other steps)

## configuration

Plugins can be configured on [command steps] in your `pipeline.yml` [pipeline definitions]. When a command step with a plugin is run on an agent, the plugin is cloned from its git repository, and its hooks are executed, passing in any configuration you've specified in your pipeline.yml.

The simplest plugin is one that accepts no configuration, such as the [Detect Clowns plugin], which will return an error if any clown emojis are found in your source code:

```yml
steps:
  - label: "\:clown_face\:"
    plugins:
      - detect-clowns#v1.0.0: ~
```

More commonly, plugins accept various configuration options, as the [Docker plugin] which can be configured to use a Docker image to run your command:

```yml
steps:
  - command: yarn install && yarn run test
    plugins:
      - docker#v1.0.0:
          image: node
          workdir: /app
```

More advanced plugins, such as [Docker Compose plugin], are designed to be used multiple times in a pipeline:

```yml
steps:
  # Prebuild the app image, upload it to a registry for later steps
  - label: "\:docker\: Build"
    plugins:
      - docker-compose#v1.0.0:
          build: app
          image-repository: index.docker.io/org/repo

  - wait

  # Use the app image built above to run concurrent tests
  - label: "\:docker\: Test %n"
    command: test.sh
    parallelism: 25
    plugins:
      - docker-compose#v1.0.0:
          run: app
```

## more complex code example with a description of how the build would run

## sources (github, git, local)

If you refer to a plugin just by name, it defaults to `https://github.com/buildkite-plugins/<name>-buildkite-plugin`. For example, a plugin name of `docker` would resolve to `https://github.com/buildkite-plugins/docker-buildkite-plugin`.

To refer to a plugin in your own GitHub organization, prefix the name with the organization. For example, a plugin name of `my-org/docker` would resolve to `https://github.com/my-org/docker-buildkite-plugin`.

You can also use fully qualified Git URLs instead of names, to refer to plugins that arenâ€™t on GitHub, or live in private Git repositories only accessible to your agents. For example:

 * `https://github.com/my-org/my-plugin.git#v1.0.0`
 * `ssh://git@github.com/my-org/my-plugin.git#v1.0.0`
 * `file:///a-local-path/my-plugin.git#v1.0.0`

Branches, tags and commits are all valid after the `#`.

We recommend always specifying a plugin version tag (e.g. `v1.2.3`) to prevent behavior changing unexpectedly, and to prevent stale checkouts of plugins on your agent machines.
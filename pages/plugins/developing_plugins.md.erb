# Writing Your First Buildkite Plugin

In this tutorial you’ll create your your first Buildkite plugin called "My First Plugin", which outputs a configurable message into the build.

<%= toc %>

## Create a new git repository

```shell
mkdir my-first-plugin-buildkite-plugin
cd my-first-plugin-buildkite-plugin
git init
```

## Create a plugin.yml

Create the following `plugin.yml` file:

```yaml
name: My First Plugin
description: A really great plugin
author: https://github.com/me
requirements: []
configuration:
  properties: {}
  additionalProperties: false
```

## Add a hook

Create the following `hooks/environment` file:

```shell
#!/bin/bash
set -euo pipefail

echo "--- Hello from my first \:buildkite\: plugin"
echo "Hello!"
```

Give the new hook file execute permission:

```shell
chmod +x hooks/environment
```

## Test the hook

Create the following `tests/environment.bats` file:

```shell
#!/usr/bin/env bats

load '/usr/local/lib/bats/load.bash'

@test "Outputs hello" {
  run "$PWD/hooks/environment"

  assert_success
  assert_output --partial "Hello from my first \:buildkite\: plugin"
}
```

Create the following `docker-compose.yml` file:

```yml
version: '2'
services:
  tests:
    image: buildkite/plugin-tester
    volumes:
      - ".:/plugin:ro"
```

You can now run the tests using docker-compose:

```shell
docker-compose run --rm tests
```

```
 ✓ Outputs hello

1 test, 0 failures
```

## Add a plugin parameter

We'll add a new `message` plugin parameter, which can set a custom message string, or the value `false` to disable the message output.

For example:

```yml
steps:
  - command: ...
    plugins:
      - my-first-plugin#v1.0.0:
          message: "Oh hai"
```

To start, update the `properties` key of the `plugin.yml` file to include a new `message` property using [JSON Schema](/docs/plugins/plugin-yaml-schema):

```yml
properties:
  message:
    type: [ string, boolean ]
```

The parameter is passed to the plugin via the `BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE` environment variable.

To add the new functionality, we'll update the tests in `tests/environment.bats`, and export the `BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE` environment variable:

```shell
#!/usr/bin/env bats

load '/usr/local/lib/bats/load.bash'

@test "Outputs a default message" {
  run "$PWD/hooks/environment"
  
  assert_success
  assert_output --partial "Hello"
}

@test "Outputs a custom message if set" {
  export BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE="Oh hai"
  run "$PWD/hooks/environment"
  unset BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE

  assert_success
  assert_output --partial "Oh hai"
}

@test "Outputs no message if set to false" {
  export BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE="false"
  run "$PWD/hooks/environment"
  unset BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE

  assert_success
  refute_output --partial "Hello"
}
```

Run the new tests, and verify they fail:

```shell
docker-compose run --rm tests
```

```
 ✓ Outputs a default message
 ✗ Outputs a custom message if set
   (from function `assert_output' in file /usr/local/lib/bats/bats-assert/src/assert.bash, line 231,
    in test file tests/environment.bats, line 20)
     `assert_output --partial "Oh hai"' failed
   
   -- output does not contain substring --
   substring (1 lines):
     Oh hai
   output (2 lines):
     --- My first \:buildkite\: plugin
     Hello
   --
   
 ✗ Outputs no message if set to false
   (from function `refute_output' in file /usr/local/lib/bats/bats-assert/src/assert.bash, line 325,
    in test file tests/environment.bats, line 29)
     `refute_output --partial "--- My first \:buildkite\: plugin"' failed
   
   -- output should not contain substring --
   substring (1 lines):
     --- My first \:buildkite\: plugin
   output (2 lines):
     --- My first \:buildkite\: plugin
     Hello
   --
   

3 tests, 2 failures
```

To finish adding the new parameter make the tests pass, we update the hook code in the `hooks/environment` file:

```shell
#!/bin/bash
set -euo pipefail

# Default 'message' to 'Hello'
BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE="${BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE:-Hello}"

if [[ "${BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE}" != "false" ]]; then
  echo "--- My first \:buildkite\: plugin"
  echo "${BUILDKITE_PLUGIN_MY_FIRST_PLUGIN_MESSAGE}"
fi
```

We can now re-run the tests, and verify they pass:

```shell
docker-compose run --rm tests
```

```
 ✓ Outputs a default message
 ✓ Outputs a custom message if set
 ✓ Outputs no message if set to false

3 tests, 0 failures
```

## Add a Readme

Add a `README.md` file to help people learn about the plugin, find examples, and instructions for how to contribute:

~~~markdown
# My First Plugin Buildkite Plugin

Outputs a message to the build log.

## Example

```yml
steps:
  - command: "ls"
    plugins:
      - username/my-first-plugin#v1.0.0:
          message: "Oh hai"
```

## Configuration

### `message` (Optional, string or boolean)

The message to output. Defaults to `"Hello"`.

To disable the message, set to `false`.

## Developing

To run the tests:

```shell
docker-compose run --rm tests
```

## Contributing

1. Fork the repo
2. Make the changes
3. Run the tests
4. Commit and push your changes
5. Send a pull request
~~~

## Add the Plugin Linter

The Buildkite Plugin Linter helps ensure your plugin is up-to-date, and has all the required files to be listed in the plugin directory.

To add the linter, update the `docker-compose.yml` file to add a `linter` service alongside the existing `tests` service:

```yml
services:
  linter:
    image: buildkite/plugin-linter
    command: ['--id', 'user/my-first-plugin']
    volumes:
      - ".:/plugin:ro"
```

You can now run the linter using docker-compose:

```shell
docker-compose run --rm linter
```

```
TODO
```

## Publish to the Plugin Directory

To add your plugin to the [Buildkite Plugin Directory](), publish your repository to a public GitHub repository and add the `buildkite-plugin` repository topic tag.

For example:

(screenshot of GH repo with tag)

<section class="Docs__troubleshooting-note">
  <p>Before publishing, make sure that all your tests are passing and that the plugin linter does not output any errors, otherwise it may not appear on the directory.</p>
</section>

## Complete source

View and download the complete plugin source on GitHub:

https://github.com/buildkite/my-first-plugin-code

## Summary of the files created

During this tutorial we created the following files:

```
README.md              # Plugin readme
plugin.yml             # Plugin meta-data and parameter list
docker-compose.yml     # Docker Compose config for running the tests
hooks/environment      # Agent hook
tests/environment.bats # Agent hook tests
```
# Securing plugins

Plugins introduce a third-party dependency to your pipeline. Any plugins not written by you should be assessed for risks prior to use in your pipeline; they provide a way to introduce executable code into your pipeline, beyond scripts in your repository, and have access to the `pipeline.yml` file.

## Security recommendations

To keep your code and pipelines as secure as possible, we recommended the following best practices:

 * Always pin to a particular version of a plugin i.e. `docker-compose#287293c4`. You can pin to any type of Git ref. The Agent will check out the specified ref the first time it encounters the plugin, and will re-use the checked out code when you next reference the plugin.
 * Use [ Bash Strict Mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/) when writing scripts and check them with [shellcheck](https://github.com/koalaman/shellcheck).
 * Take special care to avoid executing arbitrary code passed in to plugins through config. Agent config options store their values in environment variables. Anything that can set environment variables can affect plugin configuration. 
 * Do not put secrets directly into your pipelines, always use an Agent hook or a parameter store. For more information about using secrets in your pipelines, see the [Managing Secrets guide](/docs/pipelines/secrets). 

In high-security environments you can disable plugins selectively by removing them from the `BUILDKITE_PLUGINS` variable in your `environment` hook. To disable plugins entirely, Agents can be run with the `--no-plugins` flag.

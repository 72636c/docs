# Deploying to Kubernetes

This tutorial teaches deploying to Kubernetes. You'll need to prepare your
agents with the required packages, cluster access, and Docker registry access
before hand.

<%= estimated_time "30 minutes" %>

<%= toc %>

## Overview

<%= image "final_test_pipeline.png" %>

You'll automate deploys from `master` to Kubernetes by the end of the tutorial.

This tutorial uses two pipelines. The first pipeline builds, tests, and pushes
a Docker image to a registry. The second pipeline-our deploy pipeline-is
provided a `DOCKER_IMAGE` environmentment for deployment to Kubernetes. You'll
see how to trigger manual deployments, then link the pipelines for automated
deployments.

This tutorial assumes:

1. You have an existing test pipeline that pushes a Docker image to a registry
2. You have a Kubernetes cluster authenticated to the Docker registry
4. Agents have `kubectl` installed
3. Agents have `kubectl` access to the Kubernetes cluster

<section class="Docs__note">
  <p>
    This setup is outside this tutorial's scope. However, you may refer to the
    <a href="#notes">notes</a> for high level advice.
  </p>
</section>

## Create the Deploy Pipeline

Buildkite supports multiple pipelines per project. The best practice is to use
separate pipelines for testing and deploying.  Deploy pipelines are just
like other pipelines except they're triggered by different events. You can use
the [Github Deployment API](https://buildkite.com/blog/github-deployments) or
[trigger steps](https://buildkite.com/docs/pipelines/trigger-step).

Start by [creating a new pipline](https://buildkite.com/docs/pipelines/defining-steps)
that uploads steps from `.buildkite/pipeline.deploy.yml`.

<%= image "new_pipeline.png" %>

Now, configure the Github webhook to send deployment events.

<%= image "pipeline_webhook.png" %>

Next, open the pipeline settings in Buildkite. Select "Trigger builds on deployments."

<%= image "pipeline_settings.png" %>

Finally, create `.buildkite/pipeline.deploy.yml`. A single step will do for now:

```yml
steps:
  - label: "\:rocket\: Push to \:kubernetes\:"
    comamnd: script/buildlkite/deploy
    concurrency: 1
    concurrency_group: deploy/tutorial
```

Set `concurrency` and `concurrency_group` when updating mutable state. These
settings ensures only one step runs at a time, effectively creating a deploy
queue.

Now the pipeline is wired up. Time for the deploy step.

## Setup the Deploy Step

Create a Kubernetes deployment manifest that references the `DOCKER_IMAGE`
environment variable. `kubectl` does not interpolate environment variables out
of the box, so you'll need a different solution. The `envsubst` command works
well for this case. `envsubst` ("environment substitute") replaces environment
variables from standard input. The result may be piped directly to `kubectl`.

First, You'll need a deployment YML file. Call this file `k8s/deployment.yml`:

```yml
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tutorial
  labels:
    app: tutorial
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tutorial
  template:
    metadata:
      labels:
        app: tutorial
    spec:
      containers:
        - name: app
          image: "${DOCKER_IMAGE}"
          ports:
            - containerPort: 3000
```

<section class="Docs__note">
  <p>
    Please refer to the official Kubernetes <a
    href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/">deployment
    documentation</a> for more information. Also note that there are multiple
    ways to deploy applications to Kubernetes.
  </p>
</section>

Now create a short deploy script (`script/buildkite/deploy`):

```bash
#!/usr/bin/env bash

set -euo pipefail

if [ -z "${DOCKER_IMAGE:-}" ]; then
  echo "\:boom\: \$DOCKER_IMAGE missing" 1>&2
  exit 1
fi

echo '--- \:kubernetes\: Shipping'
envsubst < k8s/app.yml | kubectl apply -f -
```

## Perform a Manual Deployment

Open the deployment pipline and click "New Build". Click "Options" and provide the `DOCKER_IMAGE`.

<%= image "manual_deployment.png" %>

Assuming your agents have the required access, then success! :tada:

<%= image "manual_deployment_success.png" %>

## Automate Deployments

[Trigger steps](https://buildkite.com/docs/pipelines/trigger-step) connect
pipelines. Add a trigger step to the existing test pipeline to trigger the
deploy pipeline. You may also filter out branches with the `branches` option
and set environment variables. Remember to set the `DOCKER_IMAGE` environment
variable.

Add these steps to your existing `.buildkite/pipeline.yml`:

```yml
  # Add a wait step to only deploy after all steps complete
  - wait

  - label: ':rocket: Deploy'
    trigger: kubernetes-tutorial-deploy
    branches: "master"
    build:
      message: "${BUILDKITE_MESSAGE}"
      commit: "${BUILDKITE_COMMIT}"
      branch: "${BUILDKITE_BRANCH}"
      env:
        # TODO: replace with your Docker image name
        DOCKER_IMAGE: "asia.gcr.io/buildkite-kubernetes-tutorial/app:${BUILDKITE_BUILD_NUMBER}"
```

It's magic time. Push some code. :tada: Automated deployments!

<%= image "final_test_pipeline.png" %>

## Notes

Configuring `kubectl` access depends on your infrastructure. Here's an overview
for common senarios.

If you're on GCP using agents on GCE and an GKE cluster:

1. Grant GCE agents GKE access with a [service account](https://cloud.google.com/compute/docs/access/service-accounts)
2. Install `gcloud` agent instances
3. Use `gcloud container clusters get-credentials` to get `kubectl` access

If you're on AWS using agents on EC2 and an EKS cluster:

1. Grant agent access to EKS API calls with an instance profile
2. [Register the Buildkite agent IAM role with EKS](https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html)
3. [Install kubectl](https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html) on agents
4. [Install IAM authenticator](https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html) on agents
5. Install the AWS CLI
6. Use `aws update-kubeconfig` to get [kubectl access](https://docs.aws.amazon.com/eks/latest/userguide/create-kubeconfig.html)

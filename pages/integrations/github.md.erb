# GitHub

Buildkite can connect to your GitHub repository and use the Commit Status API to update the status of commits in Pull Requests.

To complete this integration, you will need admin privileges for your GitHub repository.

{:toc}

## Connecting Buildkite and GitHub

You can now use our [GitHub App](#to-connect-your-buildkite-account-to-github-using-the-github-app) to connect a Buildkite organization to a GitHub organization, removing the reliance on individual user connections to report build statuses. See the [changelog announcement](https://buildkite.com/changelog/102-github-app-integration).

If you want to [connect using OAuth](#to-connect-your-buildkite-account-to-github-using-oauth) you can still do so from your Buildkite Personal Settings.

## To connect your Buildkite account to GitHub using the GitHub App

Connecting Buildkite and GitHub using the GitHub App lets your GitHub organization Admins see permissions and manage access on a per-repository basis.

1. Open your Buildkite organization's Settings and choose [Repository Providers](https://buildkite.com/organizations/~/repository-providers)
2. Click GitHub and select the GitHub organization you want to connect to your Buildkite organization

<%= image "repository-providers.png", width: 1168, height: 798, alt: "Screenshot of the Buildkite Repository Providers" %>

You'll be prompted to give the GitHub App permission to submit commit statuses to your organization's repositories. After that you can [set up a pipeline](#setting-up-a-new-pipeline-for-a-github-repository).

## To connect your Buildkite account to GitHub using OAuth

To connect your GitHub account open Buildkite’s Personal Settings, choose [Connected Apps](https://buildkite.com/user/connected-apps) then click the GitHub Connect button:

<%= image "personal-settings.png", width: 1650/2, height: 642/2, alt: "Screenshot of the Buildkite Connected Apps screen" %>

You'll be prompted to give permission for Buildkite to post status
updates, and then redirected back to your Connected Apps page. After that you can [set up a pipeline](#setting-up-a-new-pipeline-for-a-github-repository).

## Setting up a new pipeline for a GitHub repository

1. Create a new pipeline on Buildkite, using your GitHub repository URL in the form `git@github.com:your/repo`.

    <%= image "new-pipeline.png", width: 1550/2, height: 846/2, alt: "Screenshot of adding a new pipeline " %>

2. Add at least one step to your pipeline, then click "Next". Change these steps at any time in Pipeline Settings.

3. Follow the instructions on the page to set up a webhook:

    1. Add a new webhook in GitHub.
    2. Paste in the provided webhook URL.
    3. Select which events trigger the webhook.

If you need to set up the webhook again, you can find the instructions linked at the bottom of the pipeline GitHub settings page.

## Branch configuration and Settings

You can edit the GitHub settings for each pipeline from the pipeline’s settings page:

<%= image "github-settings.png", width: 1700/2, height: 2497/2, alt: "Screenshot of the Buildkite GitHub settings" %>

If you need more control over your Pipeline configuration, add a [Pipeline.yml](/docs/pipelines/defining-steps#adding-steps) to your repository. Then you can use [conditionals](/docs/pipelines/conditionals) and [branch filtering](/docs/pipelines/branch-configuration) to configure your Pipeline.

## Running builds on Pull Requests

To run builds for GitHub Pull Requests, edit the GitHub settings for your Buildkite pipeline and choose the 'Build Pull Requests' checkbox.

- Choose the 'build pull requests' checkbox.

Optionally, select one or more of the following:

- Filter builds using a conditional
- limit pull request builds to certain branches.
- skip pull request builds for commits that have already been built.
- build pull requests that are ready for review.
- build pull requests for forked repositories. Make sure to check the [managing secrets](/docs/pipelines/secrets) guide if you choose to do this.

<%= image "pull-requests.png", width: 1550/2, height: 1006/2, alt: "Screenshot of the Buildkite GitHub settings" %>

If you want to run builds *only* on pull requests, set the Branch Filter Pattern in the pipeline to a branch name that will never occur (e.g. "this-branch-will-never-occur"). Pull request builds ignore the Branch Filter Pattern, and all pushes to other branches that don't match the pattern are ignored.

<%= image "branch-limiting.png", width: 1550/2, height: 694/2, alt: "Screenshot of Branch Filter pattern" %>

## Noreply email handling

When you [connect your GitHub account to Buildkite](#connecting-buildkite-and-github) the email address associated with the GitHub account is added to your Buildkite account. If you've got GitHub set not to display your email, `[username]@users.noreply.github.com` or the more recent `[username+id]@users.noreply.github.com` is added instead. The email address of a commit is one of the ways Buildkite matches webhook builds to users.

## Customizing commit statuses

The commit status is the label used to identify the Buildkite checks on your commits and pull requests. Normally, Buildkite autogenerates these statuses. 

For example: if you select _Update commit statuses_ in your _Pipeline Settings_, your checks will appear on your pull request as _buildkite/<pipeline-name>/pr_.

<%= image "update-commit-statuses-on-to-github.png", alt: "Screenshot of GitHub build settings and the resulting GitHub pull request statuses" %>

Sometimes, you may wish to customize these statuses. This can be especially useful if you reuse the same pipeline for multiple components in a monorepo.

You can do this at both the build and step level, using the [`notify`](/docs/pipelines/notifications) attribute in your `pipeline.yml`.

### Build level

1. Add the following to your `pipeline.yml`, not nested under any other parameters:

    ```yaml
    notify:
    - github_commit_status:
        context: "my-custom-status"
    ```
<%= render_markdown 'integrations/step_2_3_github_custom_status' %>

### Step level

1. Add `notify` to a command in your `pipeline.yml`:

    ```yaml
    steps:
    - label: "Example Script"
        command: "script.sh"
        notify:
        - github_commit_status:
            context: "my-custom-status"
    ```
<%= render_markdown 'integrations/_step_2_3_github_custom_status' %>

# Artifactory

You can use JFrog Artifactory to store any build artifacts. The Agent has first class support for uploading and downloading from Artifactory.

<%= toc %>

## Configuring the Buildkite Agent

To get started using Artifactory with the Agent, export the environment variables in your Agent environment hook, or fetch them from your parameter store into the required variables.

_Required vars:_

<table>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_URL</code></td>
    <td>
      Your Artifactory instance URL, including the /artifactory postfix<br>
      <em>Example:</em> <code>http://my-domain.com/artifactory</code><br>
    </td>
  </tr>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_USER</code></td>
    <td>
      The username of a user configured in your Artifactory instance<br>
      <em>Example:</em> <code>cdanvers</code><br>
    </td>
  </tr>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_PASSWORD</code></td>
    <td>
      The password for your Artifactory user<br>
      <em>Example:</em> <code>xxxx</code><br>
    </td>
  </tr>
</table>

_Optional vars:_

<table>
  <tr>
    <td><code>BUILDKITE_ARTIFACT_UPLOAD_DESTINATION</code></td>
    <td>
      The path you'd like to upload to, including the rt:// prefix<br>
      <em>Example:</em> <code>"rt://generic-repo/build-$BUILDKITE_BUILD_NUMBER/$BUILDKITE_JOB_ID/"</code><br>
    </td>
  </tr>
</table>

By default, any artifacts will be uploaded to the repository inside a folder named with the ID of the job that uploaded it. Specifying the `BUILDKITE_ARTIFACT_UPLOAD_DESTINATION` variable will overwrite this default. 

For example, the below Agent environment hook is stored securely on the Agent machine and exports all of the available variables:

```bash
export BUILDKITE_ARTIFACTORY_URL=http://my-domain:8081/artifactory
export BUILDKITE_ARTIFACTORY_USER=admin
export BUILDKITE_ARTIFACTORY_PASSWORD=fishes-are-the-coolest
export BUILDKITE_ARTIFACT_UPLOAD_DESTINATION="rt://generic-repo/$BUILDKITE_JOB_ID/"
```

For best practices and recommendations about secret storage in the Agent, see the [Managing Secrets](/docs/pipelines/secrets) guide.

## Uploading and downloading artifacts

Once you've configured the Artifactory `buildkite-agent` environment variables, the `artifact_paths` attribute of command steps will automatically use the Artifactory configuration to upload artifacts. 

The following example `pipeline.yml` file will build a golang binary and upload it to Artifactory. The artifact will be visible in the build on Buildkite and can be downloaded in future steps using `buildkite-agent artifact download`.

```yml
steps:
  - label: "\:golang\: \:package\:"
    command: "go build -v -o myapp-darwin-amd64"
    artifact_paths: "myapp-darwin-amd64"
    plugins:
      - docker#v3.3.0:
          image: "golang:1.11"
```



You can also use [buildkite-agent artifact](https://buildkite.com/docs/agent/v3/cli-artifact) commands directly, for example `buildkite-agent artifact upload my-file` and `buildkite-agent artifact download my-file`.

<%= image "buildkite-artifact-step.png", width: 2320/2, height: 822/2, alt: "Screenshot of a Buildkite command step's output logging an artifact upload to Artifactory" %>

<%= image "artifactory-go-local-repository.png", width: 1486/2, height: 710/2, alt: "Screenshot of an artifact in the go-local repository in Artifactory" %>

All artifacts in Buildkite link to their location in Artifactory. Click through to view them in Artifactory.

<screenshot of artifacts tab with link to artifactory>

## Configuring package management

In addition to managing your artifacts manually, you can also use [Artifactory's package management](https://www.jfrog.com/confluence/display/RTF/Package+Management) for installing and managing build dependencies.  

In the example Agent hook below, the registry URL is set to the URL of the npm repository in an Artifactory instance. All `npm` commands on this agent will then use the specified [Artifactory NPM registry](https://www.jfrog.com/confluence/display/RTF/npm+Registry?src=sidebar).

```bash
#!/bin/bash
set -e
export ARTIFACTORY_NPM_REGISTRY="http://my-artifactory-server.internal:8081/artifactory/api/npm/npm-local/"
npm config set registry "$ARTIFACTORY_NPM_REGISTRY"
```

If you're running npm commands in a Docker based build step, you'll need to pass the `ARTIFACTORY_NPM_REGISTRY` environment variable through to the container. The example `pipeline.yml` file below uses the [Docker plugin](https://github.com/buildkite-plugins/docker-buildkite-plugin) to pass the `ARTIFACTORY_NPM_REGISTRY` variable from the previous example through to the docker image used in the step:

```yml
steps:
  - label: "\:node\: \:hammer\:"
    commands:
      - npm install
      - npm test
    plugins:
      docker#v3.3.0:
        image: "node:11"
        environment:
          - NPM_CONFIG_REGISTRY: "$ARTIFACTORY_NPM_REGISTRY"
```

You can follow a similar pattern for [Ruby gem repositories](https://www.jfrog.com/confluence/display/RTF/RubyGems+Repositories), [Docker registries](https://www.jfrog.com/confluence/display/RTF/Docker+Registry), and any other Artifactory supported package managers.


# Artifactory

You can use JFrog Artifactory to store any build artifacts. The Agent has first class support for uploading and downloading from Artifactory.

<%= toc %>

## Configuring the Buildkite Agent

To get started using Artifactory with the Agent, export the environment variables in your Agent environment hook, or fetch them from your parameter store into the required variables.

_Required vars:_

<table>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_URL</code></td>
    <td>
      Your Artifactory instance URL, including the /artifactory postfix<br>
      <em>Example:</em> <code>http://my-domain.com/artifactory</code><br>
    </td>
  </tr>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_USER</code></td>
    <td>
      The username of a user configured in your Artifactory instance<br>
      <em>Example:</em> <code>cdanvers</code><br>
    </td>
  </tr>
  <tr>
    <td><code>BUILDKITE_ARTIFACTORY_PASSWORD</code></td>
    <td>
      The password for your Artifactory user<br>
      <em>Example:</em> <code>xxxx</code><br>
    </td>
  </tr>
</table>

_Optional vars:_

<table>
  <tr>
    <td><code>BUILDKITE_ARTIFACT_UPLOAD_DESTINATION</code></td>
    <td>
      The path you'd like to upload to, including the rt:// prefix<br>
      <em>Example:</em> <code>"rt://generic-repo/build-$BUILDKITE_BUILD_NUMBER/$BUILDKITE_JOB_ID/"</code><br>
    </td>
  </tr>
</table>

By default, any artifacts will be uploaded to the repository inside a folder named with the ID of the job that uploaded it. Specifying the `BUILDKITE_ARTIFACT_UPLOAD_DESTINATION` variable will overwrite this default. 

For example, the below Agent environment hook is stored securely on the Agent machine and exports all of the available variables:

```bash
export BUILDKITE_ARTIFACTORY_URL=http://my-domain:8081/artifactory
export BUILDKITE_ARTIFACTORY_USER=admin
export BUILDKITE_ARTIFACTORY_PASSWORD=fishes-are-the-coolest
export BUILDKITE_ARTIFACT_UPLOAD_DESTINATION="rt://generic-repo/$BUILDKITE_JOB_ID/"
```

For best practices and recommendations about secret storage in the Agent, see the [Managing Secrets](/docs/pipelines/secrets) guide.

<screenshot of setting the required envs>

## Uploading and downloading artifacts

To upload to Artifactory, use the [artifact upload command](https://buildkite.com/docs/agent/v3/cli-artifact#uploading-artifacts). When the Agent has been configured with the required environment variables, the below example command will upload the file to Artifactory:

```bash
buildkite-agent artifact upload logs.txt
```

Use the [artifact download command](https://buildkite.com/docs/agent/v3/cli-artifact#downloading-artifacts) to download your artifacts from Artifactory.

```bash
buildkite-agent artifact download logs.txt
```

<screenshot?>

## Browsing artifacts

All artifacts in Buildkite link to their location in Artifactory. Click through to view them in Artifactory.

<screenshot of artifacts tab with link to artifactory>

<screenshot of artifact in artifactory>

## Docker, Gems, NPM, Python repositories

You can use Artifactory to store artifacts of any type that you have configured in the Artifactory dashboard. Common repository types include Docker, Ruby Gems, NPM packages, and Python packages. See the [Artifactory documentation](https://www.jfrog.com/confluence/display/RTF/Using+Artifactory) for further information about setting up these repositories in Artifactory.


# Importing JSON

{:toc}

If a test collector is not available for your test framework, you can upload tests results directly to the Test Analytics API or [write your own test collector](/docs/test-analytics/your-own-collectors).
You can upload JSON-formatted test results (described in this page) or [JUnit XML](/docs/test-analytics/importing-junit-xml).

## How to import JSON in Buildkite

To import [JSON-formatted test results](#json-test-results-data-reference) in Buildkite, make a `POST` request to `https://analytics-api.buildkite.com/v1/uploads` with a `multipart/form-data`.

For example, to import the contents of a [JSON-formatted test results](#json-test-results-data-reference) (`test-results.json`):

1. Securely [set the Test Analytics token environment variable](/docs/pipelines/secrets) (`BUILDKITE_ANALYTICS_TOKEN`).

2. Run the following `curl` command:

    ```sh
    curl \
      -X POST \
      -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
      -F "data=@test-results.json" \
      -F "format=json" \
      -F "run_env[CI]=buildkite" \
      -F "run_env[key]=$BUILDKITE_BUILD_ID" \
      -F "run_env[url]=$BUILDKITE_BUILD_URL" \
      -F "run_env[branch]=$BUILDKITE_BRANCH" \
      -F "run_env[commit_sha]=$BUILDKITE_COMMIT" \
      -F "run_env[number]=$BUILDKITE_BUILD_NUMBER" \
      -F "run_env[job_id]=$BUILDKITE_JOB_ID" \
      -F "run_env[message]=$BUILDKITE_MESSAGE" \
      https://analytics-api.buildkite.com/v1/uploads
    ```

To learn more about passing through environment variables to `run_env`-prefixed fields, see [CI Environments](/docs/test-analytics/ci-environments#buildkite).

## How to import JSON in CircleCI

To import [JSON-formatted test results](#json-test-results-data-reference), make a `POST` request to `https://analytics-api.buildkite.com/v1/uploads` with a `multipart/form-data` body, including as many of the following fields as possible in the request body:

For example, to import the contents of a `test-results.json` file in a CircleCI pipeline:

1. Securely [set the Test Analytics token environment variable](/docs/pipelines/secrets) (`BUILDKITE_ANALYTICS_TOKEN`).

2. Run the following `curl` command:

    ```sh
    curl \
    -X POST \
    -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
    -F "data=@test-results.json" \
    -F "format=json" \
    -F "run_env[CI]=circleci" \
    -F "run_env[key]=$CIRCLE_WORKFLOW_ID-$CIRCLE_BUILD_NUM" \
    -F "run_env[number]=$CIRCLE_BUILD_NUM" \
    -F "run_env[branch]=$CIRCLE_BRANCH" \
    -F "run_env[commit_sha]=$CIRCLE_SHA1" \
    -F "run_env[url]=$CIRCLE_BUILD_URL" \
    https://analytics-api.buildkite.com/v1/uploads
    ```

To learn more about passing through environment variables to `run_env`-prefixed fields, see [CI Environments](/docs/test-analytics/ci-environments#circleci).

## How to import JSON in GitHub Actions

To import [JSON-formatted test results](#json-test-results-data-reference), make a `POST` request to `https://analytics-api.buildkite.com/v1/uploads` with a `multipart/form-data` body, including as many of the following fields as possible in the request body:

For example, to import the contents of a `test-results.json` file in a GitHub Actions pipeline run:

1. Securely [set the Test Analytics token environment variable](/docs/pipelines/secrets) (`BUILDKITE_ANALYTICS_TOKEN`).

2. Run the following `curl` command:

    ```sh
    curl \
    -X POST \
    -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
    -F "data=@test-results.json" \
    -F "format=json" \
    -F "run_env[CI]=github_actions" \
    -F "run_env[key]=$GITHUB_ACTION-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT" \
    -F "run_env[number]=$GITHUB_RUN_NUMBER" \
    -F "run_env[branch]=$GITHUB_REF" \
    -F "run_env[commit_sha]=$GITHUB_SHA" \
    -F "run_env[url]=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" \
    https://analytics-api.buildkite.com/v1/uploads
    ```

To learn more about passing through environment variables to `run_env`-prefixed fields, see [CI Environments](/docs/test-analytics/ci-environments#github-actions).

## JSON test results data reference

JSON test results data is made up of an array of one or more _test result_ objects.
A test result object contains an overall result and metadata.
It also contains a _history_ object, which is a summary of the duration of the test run.
Within the history object, detailed _span_ objects record the highest resolution details of the test run.

Schematically, the JSON test results data is like this:

<!-- markdownlint-capture -->
<!-- markdownlint-disable MD007 -->

* A test result array of:
   - [Test result](#json-test-results-data-reference-test-result-objects)
      * [History](#json-test-results-data-reference-history-objects)
         - [Spans](#json-test-results-data-reference-span-objects)

<!-- markdownlint-restore -->

Or in a simplified code view:

```js
[
  {
    /* Test result object */
    "history": {
      /* history object */
      "children": [
        /* span objects */
      ]
    }
  },
  { /* Test result object */ },
]
```

### Test result objects

A test result represents a single test run.


<%#
<!--
Key;required;Type;Description;example
id;true;UUIDv4 string;a unique identifier for this test result;1b70486f-ca5f-4e6d-beb8-6347b2e49278
scope;;string;a group or topic for the test;Student.isEnrolled()
name;;string;a name or description for the test;Manager.isEnrolled() returns_boolean
identifier;true;string;a unique identifier for the test. If your test runner supports it, use the identifier needed to rerun this test;Manager.isEnrolled#returns_boolean
location;;string;the file and line number where the test originates, separated by a colon (:);./tests/Manager/isEnrolled.js:32
file_name;;string;the file where the test originates;./tests/Manager/isEnrolled.js
result;;string "passed", "failed", "skipped", or "unknown";the outcome of the test;"failed"
failure_reason;;string;if applicable, a short summary of why the test failed;Expected Boolean, got Object
history;true;history object;See [History objects];
-->
%>

| Key                             | Type                                                        | Description                                                                                                     | Example                                |
|---------------------------------|-------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------|----------------------------------------|
| `id` (required)                 | UUIDv4 string                                               | a unique identifier for this test result                                                                        | `1b70486f-ca5f-4e6d-beb8-6347b2e49278` |
| `scope`                         | string                                                      | a group or topic for the test                                                                                   | `Student.isEnrolled()`                 |
| `name`                          | string                                                      | a name or description for the test                                                                              | `Manager.isEnrolled() returns_boolean` |
| `identifier` (required)         | string                                                      | a unique identifier for the test. If your test runner supports it, use the identifier needed to rerun this test | `Manager.isEnrolled#returns_boolean`   |
| `location`                      | string                                                      | the file and line number where the test originates, separated by a colon (`:`)                                  | `./tests/Manager/isEnrolled.js:32`     |
| `file_name`                     | string                                                      | the file where the test originates                                                                              | `./tests/Manager/isEnrolled.js`        |
| `result`                        | strings `"passed"`, `"failed"`, `"skipped"`, or `"unknown"` | the outcome of the test                                                                                         | `failed`                               |
| `failure_reason`                | string                                                      | if applicable, a short summary of why the test failed                                                           | `Expected Boolean, got Object`         |
| `history` (required)            | history object                                              | Read [History objects](#json-test-results-data-reference-history-objects)                                       |                                        |

**Example:**

```js
{
  "id": "95f7e024-9e0a-450f-bc64-9edb62d43fa9",
  "scope": "Analytics::Upload associations",
  "name": "fails",
  "identifier": "./spec/models/analytics/upload_spec.rb[1:1:3]",
  "location": "./spec/models/analytics/upload_spec.rb:24",
  "file_name": "./spec/models/analytics/upload_spec.rb",
  "result": "failed",
  "failure_reason": "Failure/Error: expect(true).to eq false",
  "history": {
    /* history object */
  }
}
```

### History objects

A history object represents the overall duration of the test run and contains detailed span data, more finely recording the test run.

<%#
<!--
Key;Required;Type;Description;Example
start_at;;number;TK
end_at;;number;TK
duration;true;number;how long the test took to run;7.07654
children;;array of span objects;See [Span objects](#tk)
-->
%>

| Key                   | Type                  | Description                                                         |
|-----------------------|-----------------------|---------------------------------------------------------------------|
| `start_at`            | number                | A monotonically increasing number                                   |
| `end_at`              | number                | A monotonically increasing number                                   |
| `duration` (required) | number                | How long the test took to run                                       |
| `children`            | array of span objects | Read [Span objects](#json-test-results-data-reference-span-objects) |

**Example:**

```js
{
  "start_at": 347611.724809,
  "end_at": 347612.451041,
  "duration": 0.726232000044547,
  "children": [
    /* span objects */
  ]
}
```

### Span objects

Span objects represent the finest duration resolution of a test run.
It represents, for example, the duration of an individual database query within a test.

<%#
<!--
Key;required;Type;Description;example
section;true;string "http", "sql", "sleep", or "annotation"
start_at;;number
end_at;;number
duration;;number;how long the test took to run
-->
%>

| Key                | Type                                                   | Description                       |
|--------------------|--------------------------------------------------------|-----------------------------------|
| `section` (required) | string `"http"`, `"sql"`, `"sleep"`, or `"annotation"` | A section category for this span  |
| `start_at`           | number                                                 | A monotonically increasing number |
| `end_at`             | number                                                 | A monotonically increasing number |
| `duration`           | number                                                 | How long the span took to run     |

**Example:**

```js
{
  "section": "sql",
  "start_at": 347611.734956,
  "end_at": 347611.735647,
  "duration": 0.0006910000229254365
}
```

# Importing JUnit XML

While most test frameworks have a built-in JUnit XML export feature, these JUnit reports do not provide detailed span information. Therefore, features in Test Analytics that depend on span information aren't available when using JUnit as a data source. If you need span information, consider using the [JSON import](/docs/test-analytics/importing-json) API instead.

{:toc}

## How to import JUnit XML


To import JUnit XML, make a `POST` request to `https://analytics-api.buildkite.com/v1/uploads` with a `multipart/form-data` body.

To upload JUnit XML, the request body must contain the following fields:

| Field name | Value |
| --- | --- |
| `data` | JUnit XML |
| `format` | `junit` |
| `run_env[CI]` | The name of your CI environment |
| `run_env[key]` | A unique key for the build that initiated the CI run |
| `run_env[url]` | A URL that links to the build in your CI system |
| `run_env[branch]` | A version control branch or reference for this run |
| `run_env[commit_sha]` | A unique identifier for the version control revision for this run |
| `run_env[number]` | A counter for this build |
| `run_env[job_id]` | An identifier for a job within a build |
| `run_env[message]` | The commit message or other description of the build |

For example, to import the contents of a `junit.xml` file in a Buildkite pipeline run:

1. Securely [set the Test Analytics token environment variable](/docs/pipelines/secrets) (`BUILDKITE_ANALYTICS_TOKEN`).

2. Run the following `curl` command:

    ```sh
    curl \
      -X POST \
      -H "Authorization: Token token=\"$BUILDKITE_ANALYTICS_TOKEN\"" \
      -F "data=@junit.xml" \
      -F "format=junit" \
      -F "run_env[CI]=buildkite" \
      -F "run_env[key]=$BUILDKITE_BUILD_ID" \
      -F "run_env[url]=$BUILDKITE_BUILD_URL" \
      -F "run_env[branch]=$BUILDKITE_BRANCH" \
      -F "run_env[commit_sha]=$BUILDKITE_COMMIT" \
      -F "run_env[number]=$BUILDKITE_BUILD_NUMBER" \
      -F "run_env[job_id]=$BUILDKITE_JOB_ID" \
      -F "run_env[message]=$BUILDKITE_MESSAGE" \
      https://analytics-api.buildkite.com/v1/uploads
    ```

To learn more about passing through environment variables to `run_env`-prefixed fields, read [CI Environments](/docs/test-analytics/ci-environments).

Note that when a payload is processed, Buildkite validates and queues each test execution result in a loop. For that reason, it is possible for some to be queued and others to be skipped. Even when some or all test executions get skipped, REST API will respond with a `202 Accepted` because the upload and the run were created in the database, but the skipped test execution results were not ingested.

Currently, the errors returned contain no information on individual records that failed the validation. This may complicate the process of fixing and retrying the request.

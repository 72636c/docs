# Swift Collectors

Test Analytics ships with Swift collectors listed on this page, and [more coming soon](https://github.com/buildkite/test-collector-swift/labels/test%20framework).
You can also upload test results by importing [JSON](/docs/test-analytics/importing-json) or [JUnit XML](/docs/test-analytics/importing-junit-xml).

{:notoc}

## XCTest

[XCTest](https://developer.apple.com/documentation/xctest) is a test framework to write unit tests for your Xcode projects.

Before you start, make sure XCTest runs with access to [CI environment variables](/docs/test-analytics/ci-environments).

1. [Create a test suite](https://buildkite.com/docs/test-analytics), and copy the API token that it gives you.

    To use the Buildkite Test Collector with a Swift Package Manager project, add this repository to the `Package.swift` manifest and add `BuildkiteTestCollector` to any test target requiring analytics:

    ```swift
    let package = Package(
      name: "MyProject",
      dependencies: [
        .package(url: "https://github.com/buildkite/test-collector-swift", from: "0.1.0")
      ],
      targets: [
        .target(name: "MyProject"),
        .testTarget(
          name: "MyProjectTests",
          dependencies: [
            "MyProject",
            .product(name: "BuildkiteTestCollector", package: "test-collector-swift")
          ]
        )
      ]
    )
    ```

1. Set the `BUILDKITE_ANALYTICS_TOKEN` secret on your CI to the API token from earlier.

1. Push your changes to a branch, and open a pull request. After a test run has been triggered, results will start appearing in your analytics dashboard.

    ```bash
    git checkout -b add-buildkite-test-analytics
    git commit -am "Add Buildkite Test Analytics"
    git push origin add-buildkite-test-analytics
    ```

### Debugging

To enable debugging output, set the `BUILDKITE_ANALYTICS_DEBUG_ENABLED` environment variable to `true`.

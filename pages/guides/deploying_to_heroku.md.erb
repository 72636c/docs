# Deploying to Heroku

It’s easy to test and deploy [Heroku](https://heroku.com/) applications from your Buildkite pipelines. This guide will run you through the steps required.

<%= toc %>

## Using the Heroku toolbelt

You can deploy to Heroku using the same `git push` command you’d run from your development machine. The only difference is that your agent will be doing the `git push` for you from within a Buildkite job.

### Setting up the Heroku toolbelt

First step is installing the toolbelt on your Buildkite agent machine:

```bash
$ wget -O- https://toolbelt.heroku.com/install-ubuntu.sh | sh
```

Once that’s installed you’ll need to authorize as a Heroku user. We recommend setting up a Heroku user just for this machine (a “machine user”), and adding the user as a collaborator in Heroku.

Once you’re ready to authorize the new Heroku user on your build machine, run the login command as your buildkite-agent user (which for most packages is `buildkite-agent`):

```bash
$ sudo su buildkite-agent
$ heroku login
```

You’re now ready to run the `heroku` command from your Buildkite pipeline.

### Setting up your build pipeline

We want to wait for our steps to pass before deploying to Heroku. First we’ll add a waiter, and then we’ll add a command step only for the `master` branch and have it run the following command:

```bash
heroku git:remote --app my-app
git push heroku "$BUILDKITE_COMMIT":master
```

(screenshot)

What’s happening here? `heroku git:remote` ensures the git remote is always pointing to the correct Heroku application and isn’t left around from previous builds. The `git push` specifies the exact commit, to make sure we’re pushing the commit we’ve just tested.

### Run a build

Once you’ve saved the pipeline settings the final step is to push a commit to master and watch it automatically deploy to Heroku:

(screenshot)

### Post-deploy scripts

If you want to run post-deploy tasks on Heroku, simply add another waiter step and then a new command step that runs your command. For example, this command will run the `rake db:migrate` command after a successful deployment:

```bash
heroku git:remote --app my-app
heroku run rake db:migrate
```

(screenshot)

## Using Heroku pipelines

Heroku has support for automatically deploying from GitHub once your branch or pull request commit statuses are marked as passing. Unfortunately this doesn’t yet work for Buildkite commit statuses.

We’re working with Heroku to make this work with Buildkite, but for the moment.
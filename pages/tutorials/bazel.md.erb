# Using Bazel on Buildkite

[Bazel](https://www.bazel.build/) is an open-source build and test tool similar to Make, Maven, and Gradle.
Bazel supports large codebases across multiple repositories, and large numbers of users.

To use Bazel on Buildkite:

1. [Install Bazel](https://docs.bazel.build/versions/2.2.0/install.html) on one or more Buildkite Agents.
2. Add an empty [`WORKSPACE` file](https://docs.bazel.build/versions/2.2.0/tutorial/cpp.html#set-up-the-workspace) to your project to mark it as a Bazel workspace.
3. Add a [`BUILD` file](https://docs.bazel.build/versions/2.2.0/tutorial/cpp.html#understand-the-build-file) to your project to tell Bazel how to build it.

## C++ Bazel Example

Make sure you're signed into your [Buildkite account](http://buildkite.com) and have access to a Buildkite Agent. 

1. [Install Bazel](https://docs.bazel.build/versions/2.2.0/install.html) on a Buildkite Agent.
2. Look at the [Bazel example repository](https://github.com/buildkite/bazel-example) which contains 
     * an empty `WORKSPACE` file.
     * a `BUILD` file in `main` containing:

        ```
        load("@rules_cc//cc:defs.bzl", "cc_binary")

        cc_binary(
            name = "hello-world",
            srcs = ["hello-world.cc"],
        )
        ```
        {: codeblock-file="main/BUILD" }
        
        The build file uses Bazel's `cc_binary` rule to build a target called `hello-world` from the source file `hello-world.cc`.
     * A C++ source file `hello-world.cc` in `main`.  
     * A Buildkite pipeline to build the `:hello-world` target from the ``//main` package:

        ```yml
        steps:
          - label: "&#58;bazel&#58; Build"
            commands:
              - bazel build //main:hello-world
        ```
        {: codeblock-file=".buildkite/pipeline.yml"}

3. If you'd like to run the resulting `hello-world` binary, add the following line to `.buildkite/pipeline.yml`:

    ```yml
            - bazel-bin/main/hello-world
    ```

To add a Pipeline containing the steps in the previous example, vist the [Bazel example repository](https://github.com/buildkite/bazel-example) and click the button <%= image "add-to-bazel", size: '160x30', alt: 'Add to Buildkite button' %>

<!-- Can I do that directly? :point-up: -->

## Further reading

* The [Bazel C++ tutorial](https://docs.bazel.build/versions/2.2.0/tutorial/cpp.html#refine-your-bazel-build) goes into more detail about how to configure more complex Bazel builds, covering multiple build targets and multiple packages. 
* The Bazel [External dependencies docs](https://docs.bazel.build/versions/2.2.0/external.html) show you how to build other local and remote repositories. 
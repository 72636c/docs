# Buildkite Plugins

Plugins can be added to any [command step](/docs/pipelines/command-step) step in a pipeline to extend Buildkite’s native functionality, such as executing steps Docker containers, reading values from a credential store, and adding test summary annotations to builds.

<%= toc %>

## What is a plugin?

A plugin is a Git repository that provides a set of [hooks](/docs/agent/v3/hooks) that override or extend a command step's behaviour. To use a plugin you use the [command step](/docs/pipelines/command-step)’s `plugins` property. The agent automatically fetches the plugin when executing the step on your agent machine.

Plugins can be open source and available for anyone to use, or private repositories available only to your organization and agents. Plugins can be hosted and referenced in [a number of ways](/docs/plugins/using#plugin-sources).

## Finding plugins

In the [Buildkite Plugin Directory](/docs/plugins/directory) you can find all the plugins maintained by Buildkite, as well as plugins from third party developers. 

Buildkite also offers a collection of popular plugins to get you started, including a [Docker Compose plugin](https://github.com/buildkite-plugins/docker-compose-buildkite-plugin), [Junit Annotate plugin](https://github.com/buildkite-plugins/junit-annotate-buildkite-plugin), and the [Library Example plugin](https://github.com/buildkite-plugins/library-example-buildkite-plugin).

## How plugins work

Plugins are repositories of code stored in [hooks](/docs/agent/v3/hooks) files that the Agent can access directly. When you add a plugin to a buildkite [command step](/docs/pipelines/command-step), that code is read by the Agent before your commands or scripts are executed.

Some plugins allow configuration. This is usually defined in your `pipeline.yml` file, and is read by the agent before the plugin hooks are run. See each plugin's readme for detailed configuration and usage instructions. 


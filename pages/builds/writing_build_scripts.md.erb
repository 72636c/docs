# Writing Build Scripts

One of the most common actions that Buildkite steps perform is running shell scripts. These scripts are checked in alongside your code and `pipeline.yml` file. The [Buildkite Agent](/docs/agent) will run your scripts, capture and report the log output, and use the exit status to mark each job, as well as the overall build, as passed or failed.

<%= toc %>

## Configuring Bash

The shell that runs your scripts in Buildkite is a clean Bash prompt with no settings. If you rely on anything from your `~/.bash_profile` or `~/.bashrc` files when you run scripts locally, you'll need to explicitly add the relevant items to your build scripts.

When writing Bash shell scripts there are a number of options you can set to help prevent unexpected errors:

<table>
  <tbody>
  <tr>
    <th><code>e</code></th>
    <td>Exit script immediately if any command returns a non-zero exit status.</td>
  </tr>
  <tr>
    <th><code>u</code></th>
    <td>Exit script immediately if an undefined variable is used (e.g. <code>echo "$UNDEFINED_ENV_VAR"</code>).</td>
  </tr>
  <tr>
    <th><code>o pipefail</code></th>
    <td>Ensure Bash pipelines (e.g. <code>cmd | othercmd</code>) return a non-zero status if any of the commands fail, rather than returning the exit status of the last command in the pipeline.</td>
  </tr>
  <tr>
    <th><code>x</code></th>
    <td>Expand and print each command before executing. See <a href="/docs/builds/writing-build-scripts#debugging-your-environment">Debugging your environment</a> for more information. </td>
  </tr>
  </tbody>
</table>

Bashâ€™s built-in `set` command with a `-` argument is used to enable options (the `+` argument is used to disable options).

For example, the following script enables the most commonly used options for build scripts:

```bash
#!/bin/bash

set -euo pipefail

run_tests
```

For a full list of options, see the [Bash Reference Manual](https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html).

## Capturing exit status

Build scripts can sometimes contain commands that shouldn't affect the overall exit status. For example, take the following script:

```bash
#!/bin/bash

run_tests

clean_up
``` 

Running this script will exit with the status returned by the final command, `clean_up`. However, what we really care about is the exit status of the first command, `run_tests`.

By using a variable to store the exit status of `run_tests`, we can run additional commands (like `clean_up`) whilst still returning the original exit status. For example:

```bash
#!/bin/bash

# Note the lack of 'e' option here
set -uo pipefail

# Run the command we're most interested in
run_tests

# Capture the last exit status in a variable
TEST_STATUS=$?

# Run additional commands
clean_up

# Finish with the status of the original command
exit $TEST_STATUS
```

Using this technique gives you complete control over the exit code of your script, and the final success or failure of your build job.

## Debugging your environment

The first step in debugging your build script is outputting the environment information. This will show any [environment variables](/docs/builds/environment-variables) set up by the Buildkite Agent, as well as other important environment variables such as `$PATH`.

To add the environment to your build output execute `env` at the start of your build script.

```bash
#!/bin/bash

env
```

You can also set the `-x` option which will execute all subequent commands in 'debug' mode. This will step through the script and print a line for each operation it performs. If you'd like to debug some commands but not others, you can turn debugging off again with `set +x`.  

```bash
#!/bin/bash

set -x
tests.sh
set +x

run.sh
```

For more information about the `-x` option and debugging in general, see the [Bash Guide for Beginners' page on debugging bash scripts](http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_02_03.html).

## Help Tools - Linting and Debugging

To check your shell scripts for common errors and mistakes you can use a linting tool like [Shellcheck](http://www.shellcheck.net). [Shellcheck](http://www.shellcheck.net) is a shell script linter with a web-based front-end and a command line tool. It can also be used directly in your code editor.

For an explanation of a shell code snippet, the [explainshell.com](http://explainshell.com) tool is extremely useful. [Explainshell]](https://github.com/idank/explainshell)) can tell you, in plain English, what a line of code does. It also integrates the man pages of common tools such as `ssh` and `git`.


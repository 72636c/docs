# Parallelizing Builds

Running build jobs in parallel is a simple technique to decrease your build’s total running time. This guide will show you how to use Buildkite’s support for multiple agents and job parallelism to increase the speed of your builds.

<%= toc %>

## Running multiple agents

The Buildkite agent support the running of multiple instances on the one machine, as well as scaling your agents horizontally across any number of machines and networks.

Each platform’s [install instructions](/docs/agent/installation) has details for how to run multiple agents on a machine. In this case we'll use the [Ubuntu-based build agent](/docs/agent/ubuntu) to start 5 instances of the Buildkite agent:

```bash
# After running the standard install instructions...

sudo cp /etc/init/buildkite-agent.conf /etc/init/buildkite-agent-2.conf
sudo service buildkite-agent-2 start

sudo cp /etc/init/buildkite-agent.conf /etc/init/buildkite-agent-3.conf
sudo service buildkite-agent-3 start

sudo cp /etc/init/buildkite-agent.conf /etc/init/buildkite-agent-4.conf
sudo service buildkite-agent-4 start

sudo cp /etc/init/buildkite-agent.conf /etc/init/buildkite-agent-5.conf
sudo service buildkite-agent-5 start
```

You should now be able to see all 5 agents in the agent selector in your build pipeline editor:

<%= image 'agent-selector.png', size: '274x234', alt: 'Agent selector showing 5 agents' %>

## Job parallelism

To run the same step over all 5 of the agents we can set the parallelism field for a single build step:

<%= image 'parallelism.png', size: '555x138', alt: 'Step parallelism field' %>

Whilst we’re here we can also update the name of the step to include `%n`, which will automatically have the number substituted in and will help to differentiate between the different build jobs:

<%= image 'name.png', size: '555x80', alt: 'Step name field with %n' %>

Now the pipeline is configured we can create a new build:

<%= image 'build.png', size: '405x204', alt: 'The build' %>

If you inspect the first job’s environment variables you’ll find:

```
BUILDKITE_PARALLEL_JOB=0
BUILDKITE_PARALLEL_JOB_COUNT=5
```

The `BUILDKITE_PARALLEL_JOB` environment variable is the job number starting from 0, in this case each job’s value would be `0`, `1`, `2`, `3`, and `4`.

The `BUILDKITE_PARALLEL_JOB_COUNT` environment variable is the total number of jobs.

You can use these two environment variables to divide your application’s tests between the different jobs.

## Libraries

The following libraries have built-in support for the `BUILDKITE_PARALLEL_*` environment variables:

* [Knapsack](https://github.com/ArturT/knapsack)
<br>A ruby gem for that will automatically divide your tests between parallel jobs, as well as making sure each job runs in comparable time. Supports RSpec, Cucumber and Minitest.

* [Knapsack Pro](https://github.com/KnapsackPro/knapsack_pro-ruby)
<br>Is more advanced version of knapsack gem. Knapsack Pro has automated recording of tests time execution and can distribute tests across CI nodes with predetermine split (regular mode) or in a dynamic way (queue mode) to get most optimal test suite split. You can learn more [how to configure project with Knapsack Pro and Buildkite](http://docs.knapsackpro.com/2017/auto-balancing-7-hours-tests-between-100-parallel-jobs-on-ci-buildkite-example) in the article.
<br>See an example repository of how to run Rails CI with [Knapsack Pro and test steps in parallel with Buildkite](https://github.com/KnapsackPro/buildkite-rails-parallel-example-with-knapsack_pro). Here is an example for [Docker, Knapsack Pro and Buildkite](https://github.com/KnapsackPro/buildkite-rails-docker-parallel-example-with-knapsack_pro).

## Isolated jobs

You can safely run multiple agents on a single machine, though you’ll still need to ensure your application’s code is able to be run in parallel. One convenient way of doing this is by using the agent’s [built in Docker and Docker Compose support](docker-containerized-builds) which will run each job in one or more completely isolated containers.

## Auto-scaling your build agents

We've provided a number of APIs to allow you to automatically scale your build agents based on build queue.

* Using the [Pipelines API](/docs/api/pipelines) you’re able to fetch the `scheduled_jobs_count`, `waiting_jobs_count` and `running_jobs_count` to get an overview of the number of jobs waiting to be run. Based on this you can spin up new agent machines to process the jobs waiting to be run.
* Using [agent prioritization](/docs/agent/prioritization) you’ll able to define a core set up agents that are assigned work first, and then lower priority agents which you may spin up and spin down on demand.
* Using the [Agents API](/docs/api/agents) you’re able to fetch your agent’s `job` and `last_job_finished_at`, which allow you to see if they have been idle. You can then remotely shut down an agent process using the [agent stop API](/docs/api/agents#stop-an-agent) (passing `"force": false` to ensure it won’t cancel any running job).

Using these three APIs you can automate your build infrastructure, scale your agents based on demand, and ensure no-one has to wait for their build to start.

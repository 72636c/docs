# Deployments with Buildkite

There are many ways to deploy your code and infrastructure using Buildkite. If you're already working with a dedicated deployment system, this can be integrated with your Buildkite pipelines, or you can deploy using Buildkite Agents from either your test pipeline or a dedicated deployment pipeline.

<%= toc %>

## Adding a deployment step

The simplest way to perform deployments is to add an additional deploy step to your pipeline, and to make use of [step-level branch filtering](http://localhost:3000/docs/pipelines/branch-configuration#step-level-branch-filtering).

For example, the following pipeline includes a deployment step that runs after the tests pass. The deploy step is only included on `master` builds, and uses [concurrency limiting](/docs/pipelines/controlling-concurrency) to ensure only one deployment is run at a time:

```yml
steps:
  - label: ":hammer:"
    command: "scripts/test"
  - wait
  - label: ":rocket:"
    command: "scripts/deploy"
    branches: "master"
    concurrency_group: "my-app-deploy"
    concurrency_limit: 1
```

<screenshot of a deploy step>

## Creating a separate deploy pipeline

A more versatile way to model deployments is to separate your testing and deployment pipelines, and to use [trigger steps](/docs/pipelines/trigger-step) to create a deployment build once the test build has passed.

Although separate deployment pipelines take more to setup, they allow you to run manual deployments, re-run failed deployments, clearly separate deployment failures from test failures, use a separate pipeline.yml file, simplify adding rollback steps, use teams for role based access control, and whitelist deploy pipelines in agent hooks.

For example, the following "My App" test pipeline will trigger a deployment build whenever a master test build passes:

```yml
steps:
  - label: ":hammer:"
    command: "scripts/test"
  - wait
  - label: ":rocket:"
    trigger: "my-app-deployment"
    branches: "master"
```

The deployment pipeline is configured to pipeline upload the following `.buildkite/pipeline.deploy.yml` file:

```yml
steps:
  - label: ":rocket:"
    command: "scripts/deploy"
    branches: "master"
    concurrency_group: "my-app-deploy"
    concurrency_limit: 1
```

<screenshot of a deploy pipeline>

## External deployment systems

- can use anything for deployments like spinnaker, shipit, samson
- k8s, heroku, ecs, github deployments
- useful [plugins](/docs/pipelines/plugins) for deployments
- check out our plugins page for deploy things, if there's no plugin for your service/platform, add one!
- code sample of a deploy step using one of the above tools
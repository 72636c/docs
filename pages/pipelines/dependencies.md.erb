# Managing Step Dependencies

All steps in pipelines have implicit dependencies, often managed with wait and block steps. To manually change the dependency structure of your steps, you can define explicit dependencies with the `depends_on` attribute.

<%= toc %>

## Implicit dependencies with wait and block

[Wait](/docs/pipelines/wait-step) and [block](/docs/pipelines/block-step) steps provide an implicit dependency structure to your pipeline.

By adding these steps to your pipeline, the Buildkite Agent will automatically know which steps need to be run in serial and which can be run in parallel.

A wait step, as in the example below, is dependent on all previous steps completing successfully; it won't run until all steps before it have passed. All steps following the wait step are dependent on the wait step; none of them will run until the wait step has completed.

```yml
steps:
  - command: "one.sh"
  - command: "two.sh"
  - wait
  - command: "three.sh"
  - command: "four.sh"
```

[Block steps](/docs/pipelines/block-step) perform the same function, but also require unblocking either manually or via an API call before the rest of the steps can be run.

If you are collecting information with your block steps using the `prompt` or `fields` attributes but don't require the actual blocking behaviour, you can use an [input step](/docs/pipelines/input-step).

```yml
steps:
  - input: "What is the name of this release?"
```

An [input step](/docs/pipelines/input-step) provides the same functionality as the block step, but doesn't create the implicit dependencies that a block step creates.

## Defining explicit dependencies

The `depends_on` attribute can be added to all step types.

To add a dependency on another step, add the attribute with the name of the step you're depending on:

```yml
steps:
  - command: "tests.sh"
    key: "tests"
  - command: "build.sh"
    key: "build"
    depends_on: "tests"
```

In the above example, the second command step (build) will not run until the first command step (tests) has completed. Without the `depends_on` attribute, and given enough agents, these steps would run in parallel.

To ensure that a step is not dependent on any other step, add an explicit empty dependency with the `~` character. This also ensures that the step will run immediately at the start of the build:

```yml
steps:
  - command: "tests.sh"
  - wait
  - command: "lint.sh"
    depends_on: ~
```

Even though the second command step in the above example is after a wait step, the empty dependency directs it not to wait until after the `wait` step is complete. Both commands steps will be available to run immediately at the start of the build. 

## order of operations

- `if` then `depends_on` then `concurrency`
- if the step you're dependent on doesn't exist for any reason, the current step will run as soon as the rest of the jobs complete

## Allowing dependency failures

You can add the `allow_dependency_failure` attribute to any step. If there is a dependency failure - the dependency doesn't exist - the next step will still run.

However, even if you continue to run the next step, if there are any failures at all, the build will still end up failing.

This pattern is often used to run steps like code coverage or annotations to the build log that will give insight into what failed.

# Defining Your Pipeline Steps

You define your build pipeline steps in your pipeline settings or, more powerfully, via a `pipeline.yml` file.

Defining your pipeline steps in a `pipeline.yml` file gives you access to more configuration options than is available in the web interface, and allows you to version, audit and review your build pipelines alongside your source code.

<%= toc %>

## Getting started

After creating a new pipeline, click the ➕ to add a step and choose 'Read steps from repository'. On the backend, this type of step will run `buildkite-agent pipeline upload`.

<%= image("pipeline-upload-step.png", width: 612/2, height: 484/2) %>

When this step runs on an agent it reads in the pipeline file in your repository from `.buildkite/pipeline.yml`. 

For example, here is a pipeline with one step that prints “Hello!” to your build log:

```yml
steps:
  - label: Example Test
    command: echo "Hello!"
```

To test your new `.buildkite/pipeline.yml` simply commit the file, push the commit, and run a new build. After it has run, it will turn green and look similar to this:

<%= image("show-example-test.png", width: 422/2, height: 270/2) %>

## Example pipeline

Here’s a more complete example based on our internal pipline to build the Buildkite Agent. It contains script commands, wait steps, block steps, and artifacting uploading:

```yaml
steps:
  - label: '\:hammer\: Tests'
    command: 'scripts/tests.sh'
    env:
      BUILDKITE_DOCKER_COMPOSE_CONTAINER: app

  - wait

  - label: '\:package\: Package'
    command: 'scripts/build-binaries.sh'
    artifact_paths: 'pkg/*'
    env:
      BUILDKITE_DOCKER_COMPOSE_CONTAINER: app

  - wait

  - label: '\:debian\: Publish'
    command: 'scripts/build-debian-packages.sh'
    artifact_paths: 'deb/**/*'
    branches: 'master'
    agents:
      queue: 'deploy'

  - block: '\:shipit\: Release'
    branches: 'master'

  - label: '\:github\: Release'
    command: 'scripts/build-github-release.sh'
    artifact_paths: 'releases/**/*'
    branches: 'master'

  - wait

  - label: '\:whale\: Update images'
    command: 'scripts/release-docker.sh'
    branches: 'master'
    agents:
      queue: 'deploy'
```

See the [Buildkite Agent pipelines documentation](/docs/agent/cli-pipeline) for a full list of step types and supported options.

## Dynamic pipelines

You can generate pipelines dynamically from your source code thanks to the fact that pipelines are uploaded by running a command on one of your Buildkite agents. This provides you with a large amount of flexiblity to structure your pipelines as you wish.

For example you could generate a list of parallel test steps based upon the `test/*` directories within your repository. To do this you'd have a single step in your pipeline settings:

```yml
steps:
  - command: ./scripts/buildkite_test_pipeline | buildkite-agent pipeline upload
```

The `scripts/buildkite_test_pipeline` would be an executable file checked into your source repository, and could look something like the following:

```
#!/bin/bash

# exit immediately on failure, or if an undefined variable is used
set -eu

# begin the pipeline.yml file
echo "steps:"

# add a new command step to run the tests in each test directory
for test_dir in test/*/; do
  echo "  - command: \"run_tests "${test_dir}"\"
done
```

When `scripts/buildkite_test_pipeline` is run on an agent it will output the pipeline, which is then piped to the `buildkite-agent pipeline upload` command.

## Custom Pipeline Files

By default the `.buildkite/pipeline.yml` file is used when uploading a pipeline. However, you can specify a different file by adding it after the upload command:

<%= image "custom-pipeline-file.png", width: 1174/2, height: 452/2, alt: "Screenshot of a custom pipeline file upload" %>

## Migrating existing steps to a pipeline.yml

To migrate steps create in the pipeline settings to a `pipeline.yml` file without interrupting your builds, you can use the `--replace` flag. This is used with the pipeline upload command, and will replace the old steps in the UI with those in your new `pipeline.yml` file. 

To do this, add a new command step at the start of your pipeline through your pipeline settings page. This step contains the commands:

```bash
[[ -f ".buildkite/pipeline.yml" ]] && buildkite-agent pipeline upload --replace || true
```

This line of code will check if the pipeline file exists, then if it does, will execute the `pipeline upload --replace` command to replace any steps that were defined via the web interface (other than this step) with those defined in the `pipeline.yml`.

## Further documentation

See the [Buildkite Agent pipelines documentation](/docs/agent/cli-pipeline) for a full list of options for Buildkite’s pipeline command.

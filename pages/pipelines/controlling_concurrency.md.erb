# Controlling Concurrency

Some tasks need to be run with very strict concurrency rules to ensure they don’t collide with each other. Common examples for needing concurrency control are deployments, app releases and infrastructure tasks.

To help you control concurrency, Buildkite provides two primitives: concurrency limits and concurrency groups. While these two primitives are closely linked and interdependent, they operate at different levels.

{:toc}

## Concurrency Limits

Concurrency limits define the number of jobs that are allowed to run at any one time. These limits are set per-step and only apply to jobs that are based on that step.

Setting a concurrency limit of `1` on a step in your pipeline will ensure that no two jobs created from that step will run at the same time, even if there are agents available.

You can add concurrency limits to steps either through Buildkite, or your `pipeline.yml` file. Defining concurrency in a `pipeline.yml` file also requires the use of the `concurrency_group` attribute. See [Concurrency Groups](#concurrency-groups) for more information.

<%= image "concurrency-limits.png", width: 1092/2, height: 214/2, alt: "Screenshot of a step's Global Concurrency Limit field" %>

<section class="Docs__troubleshooting-note">
    <h1>I'm seeing an error about a missing concurrency_group_id when I run my pipeline upload</h1>
    <p>This error is caused by a missing concurrency group label. If you set a concurrency limit in a `pipeline.yml` file, you must also set a group label.</p>
</section>

## Concurrency Groups

Concurrency groups are labels that group together Buildkite jobs when applying concurrency limits. When you add a group label to a step in a `pipeline.yml` file, the label becomes available to all Pipelines in that organization. These group labels are checked at job runtime to determine which jobs are allowed to run concurrently. Although they're created on individual steps, they represent concurrent access to shared resources and can be used by other pipelines.

The following is an example [command step](/docs/pipelines/command-step) that ensures deployments run one at a time. If multiple builds are created with this step, each deployment job will be queued up and run one at a time in the order they were created.

```yaml
- command: 'deploy.sh'
  label: '\:rocket\: Deploy production'
  branches: 'master'
  agents:
    deploy: true
  concurrency: 1
  concurrency_group: 'our-payment-gateway/deploy'
```
{: codeblock-file="pipeline.yml"}

Make sure your `concurrency_group` names are unique, unless they're accessing a shared resource like a deployment target.
For example, giving two entirely different deploy steps the same `concurrency_group` label `deploy` will unintentionally make them part of the same concurrency group and prevent them from running concurrently. A better approach would be to label them more specifically, as `our-payment-gateway/deployment`, `terraform/update-state` or `my-mobile-app/app-store-release`.

You may want to ensure that order or volume sensitive operations like deploys or API access don't happen at the same time, and run in order that they were created.

Concurrency groups guarantee that jobs will be run in the order that they were created in. Jobs inherit the creation time of their parent. Parents of jobs can be either a build or a pipeline upload job. As pipeline uploads add more jobs to the build after it has started, the jobs that they add will inherit the creation time of the pipeline upload rather than the build.

<section class="Docs__note">
	<p>When you create a step using the Buildkite web interface, you can’t set a custom concurrency group label. A label will be automatically generated for you based on that step. If you want to use group labels, you can define your steps in a <code>pipeline.yml</code> file. </p>
</section>

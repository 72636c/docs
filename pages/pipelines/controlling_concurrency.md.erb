# Controlling Concurrency

Some tasks need to be run with very strict concurrency rules to ensure they donâ€™t collide with each other. Common examples for needing concurrency control are deployments, app releases and infrastructure tasks.

To help you control concurrency, Buildkite provides two primitives: concurrency limits and concurrency groups. While these two primitives are closely linked and interdependent, they operate at different levels.

{:toc}

## Concurrency Limits

Concurrency limits define the number of jobs that are allowed to run at any one time. These limits are set per-step and only apply to jobs that are based on that step.

Setting a concurrency limit of `1` on a step in your pipeline will ensure that no two jobs created from that step will run at the same time, even if there are agents available.

You can add concurrency limits to steps either through Buildkite, or your `pipeline.yml` file. When adding a concurrency limit, you'll also need the `concurrency_group` attribute so that steps in other pipelines can use it as well.

<section class="Docs__troubleshooting-note">
    <h3>I'm seeing an error about a missing `concurrency_group_id` when I run my pipeline upload</h3>
    <p>This error is caused by a missing `concurrency_group` attribute. Add this attribute to the same step where you defined the `concurrency` attribute.</p>
</section>

## Concurrency Groups

Concurrency groups are labels that group together Buildkite jobs when applying concurrency limits. When you add a group label to a step the label becomes available to all Pipelines in that organization. These group labels are checked at job runtime to determine which jobs are allowed to run in parallel. Although concurrency groups are created on individual steps, they represent concurrent access to shared resources and can be used by other pipelines.

The following is an example [command step](/docs/pipelines/command-step) that ensures deployments run one at a time. If multiple builds are created with this step, each deployment job will be queued up and run one after the other in the order they were created.

```yaml
- command: 'deploy.sh'
  label: '\:rocket\: Deploy production'
  branches: 'master'
  agents:
    deploy: true
  concurrency: 1
  concurrency_group: 'our-payment-gateway/deploy'
```
{: codeblock-file="pipeline.yml"}

Make sure your `concurrency_group` names are unique, unless they're accessing a shared resource like a deployment target.

For example, if you have two pipelines that each deploy to a different target but you give them both the `concurrency_group` label `deploy`, they will be part of the same concurrency group and will not be able to run at the same time, even though they're accessing separate deployment targets. Unique concurrency group names such as `our-payment-gateway/deployment`, `terraform/update-state`, or `my-mobile-app/app-store-release`, will ensure that each one is part of its own concurrency group. 

Concurrency groups guarantee that jobs will be run in the order that they were created in. Jobs inherit the creation time of their parent. Parents of jobs can be either a build or a pipeline upload job. As pipeline uploads add more jobs to the build after it has started, the jobs that they add will inherit the creation time of the pipeline upload rather than the build.

## Concurrency and Parallelism

Sometimes you need strict concurrency while also having jobs that would benefit from parallelism.
In these situations you can use *concurrency gates* to control which jobs run in parallel and which jobs run one at a time.

In the following setup, only one build at a time can *enter the concurrency gate*, but within that gate up to three e2e tests can run in parallel, subject to Agent availability. Putting the `stage-deploy` section in the gate as well ensures that every time there is a deployment made to the staging environment, the e2e tests are carried out on that deployment: 

```yaml
steps:
  - command: echo "Running unit tests"
    key: unit-tests

  - command: echo "--> Start of concurrency gate"
    concurrency_group: gate
    concurrency: 1
    key: start-gate
    depends_on: unit-tests

  - wait

  - command: echo "Running deployment to staging environment"
    key: stage-deploy
    depends_on: start-gate

  - command: echo "Running e2e tests after the deployment"
    parallelism: 3
    depends_on: [stage-deploy]
    key: e2e

  - wait

  - command: echo "End of concurrency gate <--"
    concurrency_group: gate
    concurrency: 1
    key: end-gate

  - command: echo "This and subsequent steps run independently"
    depends_on: end-gate
```
{: codeblock-file="pipeline.yml"}

### Controlling execution order

By default steps that belong to the same concurrency group are executed in the order they are added to the pipeline execution.
E.g. if you have a step A and it uses the concurrency group `X` with a concurrency of `1` at time 0 and you add another step B with the same concurrency group `X` and also a concurrency of `1` at time 1, then you are guaranteed that step A will run before step B.
This is the default behaviour (`ordered`) and for example most helpful for deploys, etc.

However, in some cases concurrency groups are not used in order to guarantee a limited number of execution to happen at the same time and preserving order, they can be used to restrict access to a limited resource for example - let's say a limited capacity in a SaaS service like Sauce Labs or similar.
In that case, the ordering of the jobs can work against you, as one execution is waiting for the next before taking up another concurrency slot. If your resource usage time is very different - let's say some cross-browser test executes in pipeline A after 1 minute whereas in another pipeline B it executes after 10 minutes then potentially you could run multiple short tests of pipeline B before the execution of the step in pipeline A is due. Ordering is not helpful because it means that depending on the order in which these tests were queued in, the limited resource you're controlling concurrency for is not utilized fully. For this you can set the concurrency method to `eager`, which removes the ordering condition.

```yaml
steps:
  - command: echo "Using a limited resource, only 10 at a time, but we don't care about order"
    concurrency_group: saucelabs
    concurrency: 10
    concurrency_method: eager
```
{: codeblock-file="pipeline.yml"}

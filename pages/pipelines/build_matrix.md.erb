# Build Matrix

Build Matrices lets you simplify complex build configurations by expanding a step template and array of matrix elements into multiple jobs.

{:toc}

For example, instead of writing three separate jobs for builds on **macOS**, **Linux** and **Windows**, like the following build configuration (which does not use a build matrix):

```yaml
steps:
  - label: "macOS build"
    command: "GOOS=darwin go build"
      - label: "Linux build"
    command: "GOOS=linux go build"
  - label: "Windows build"
    command: "GOOS=windows go build"
```
{: codeblock-file="pipeline.yml"}

You can use a Build Matrix to expand a single step into three steps by replacing the `{{matrix}}` variable in the label and command attributes of a [command step](/docs/pipelines/command-step) with each value provided in the `matrix` array. You can interpolate the matrix values into command steps (including step labels) and into [environment variables](/docs/pipelines/environment-variables).

```yaml
steps:
  - label: "{{matrix}} build"
    command: "GOOS={{matrix}} go build"
    matrix:
      - "darwin"
      - "Linux"
      - "Windows"
```
{: codeblock-file="pipeline.yml"}


All jobs created by a build matrix are marked with the _Matrix_ badge in the Buildkite interface.

<div class="Docs__note">
<p class="Docs__note__heading">Matrix and Parallel steps</h3>
<p>Matrix builds are not compatible with explicit <a href="/docs/tutorials/parallel-builds#parallel-jobs">parallelism in steps</a>. You can use a <code>matrix</code> and <code>parellism</code> in the same build, as long as they are on separate steps.</p></div>

For more complex builds, add multiple dimensions to `matrix.setup` instead of the `matrix` array. Each dimension you add is multiplied by the other dimensions, so two architectures (`matrix.setup.arch`), two operating systems (`matrix.setup.os`), and two tests (`matrix.setup.test`) create an 8 job build (2 * 2 * 2 = 8):

```yaml
steps:
- label: "ðŸ’¥ Matrix Build"
  command: "echo {{matrix.os}} {{matrix.arch}} {{matrix.test}}"
  matrix:
    setup:
      arch:
        - "amd64"
        - "arm64"
      os:
        - "windows"
        - "linux"
      test:
        - "A"
        - "B"
```
{: codeblock-file="pipeline.yml"}


If you're using `matrix.setup`, you can also use the `adjustments` key to change specific entries in the build matrix, or add new combinations. You can set the `skip` attribute to effectively remove them from the matrix, or `soft_fail` attributes to allow them to fail without breaking the build.

```yaml
steps:
- label: "ðŸ’¥ Matrix build with adjustments"
  command: "echo {{matrix.os}} {{matrix.arch}} {{matrix.test}}"
  matrix:
    setup:
      arch:
        - "amd64"
        - "arm64"
      os:
        - "windows"
        - "linux"
      test:
        - "A"
        - "B"
    adjustments:
      - with:
          os: "windows"
          arch: "arm64"
          test: "B"
        soft_fail: true
      - with:
          os: "linux"
          arch: "arm64"
          test: "B"
        skip: true
```
{: codeblock-file="pipeline.yml"}


## Adding combinations to the build matrix

To add an extra combination that isn't present in the `matrix.setup`, use the `adjustments` key and make sure to define all of the elements in the matrix. For example, to add a build for [Plan 9](https://en.wikipedia.org/wiki/Plan_9_from_Bell_Labs) (on `arm64`, and test suite `B`) to the previous example, use:

```yaml
    adjustments:
      - with:
          os: "Plan 9"
          arch: "arm64"
          test: "B"
```
{: codeblock-file="pipeline.yml"}


This results in 9 jobs, (2 * 2 * 2 + 1 = 9).

## Removing combinations from the build matrix

To remove a combination from the matrix, add it to the `adjustments` key and set `skip: true`:

```yaml
    adjustments:
      - with:
          os: "linux"
          arch: "arm64"
          test: "B"
        skip: true
```
{: codeblock-file="pipeline.yml"}

## Matrix limits

Each build matrix has a limit of 10 dimensions, 10 elements in each dimension and a total of 10 adjustments.

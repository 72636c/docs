# Managing Pipeline Secrets

When you need to use secret values in your pipelines, there are some best practices you should follow to ensure they stay safely within your infrastructure and are never stored in, or sent to, Buildkite.

{:toc}

## Using a secrets storage service

A best practice for secret storage is to use your own secrets storage service, such as [AWS Secrets Manager](https://aws.amazon.com/secrets-manager/) or [Hashicorp Vault](https://www.vaultproject.io).

There are also various [Buildkite Plugins](/docs/plugins) that integrate reading and exposing secrets to your build steps using secrets storage services.

## Storing secrets in environment hooks

If you don’t use a secrets storage service, the recommended place to store secrets is in [agent environment hooks](/docs/agent/v3/hooks). Agent hooks are stored on your agent machine, are only accessible by you, and can conditionally expose secrets to your pipeline steps.

For example, say you had the following deploy [command step](/docs/pipelines/command-step) in a pipeline:

```yml
steps:
  - command: scripts/trigger-github-deploy
    key: trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

This step runs the `scripts/trigger-github-deploy` script from the repository, and creates a GitHub Deployment using a [GitHub personal access token](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line). The script has the following source code:

```bash
#!/bin/bash
set -euo pipefail

curl \
  --header "Authorization: token $GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
  --request POST \
  --data "{\"ref\": \"$BUILDKITE_COMMIT\"}" \
  https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="scripts/trigger-github-deploy"}

To set up the `GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN` secret for the step, you would create an `environment` [agent hook](/docs/agent/v3/hooks) on your agent machine to conditionally export it. For example:

```bash
#!/bin/bash
set -euo pipefail

if [[ "$BUILDKITE_PIPELINE_SLUG" == "my-app" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == "trigger-github-deploy" ]]; then
    export GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN="bd0fa963610b..."
  fi
fi
```
{: codeblock-file="hooks/environment"}

<section class="Docs__note">
  <p>Adding conditional checks, such as the pipeline slug and the step identifier, helps to limit accidental use and disclosure of secrets.</p>
</section>

## Storing secrets with the Elastic CI Stack for AWS

To store secrets when using the [Elastic CI Stack for AWS](https://github.com/buildkite/elastic-ci-stack-for-aws), place them inside your stack’s encrypted S3 bucket. Unlike regular agent hooks, the Elastic CI Stack’s `env` hooks are per-pipeline.

For example, to expose a `GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN` environment variable to a step with identifier `trigger-github-deploy`, you would create the following `env` file on your local development machine:

```bash
#!/bin/bash
set -euo pipefail

if [[ "$BUILDKITE_STEP_KEY" == "trigger-github-deploy" ]]; then
  export GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN="bd0fa963610b..."
fi
```
{: codeblock-file="env"}

You then upload the `env` file, encrypted, into the secrets S3 bucket with the following command:

```bash
# Upload the env
aws s3 cp --acl private --sse aws:kms env "s3://elastic-ci-stack-my-stack-secrets-bucket/my-app/env"
# Remove the original file
rm env
```

See the [Elastic CI Stack for AWS](https://github.com/buildkite/elastic-ci-stack-for-aws) readme for more information and examples.

## Anti-pattern: Storing secrets in your pipeline settings

You should never store secrets on your Buildkite Pipeline Settings page. Not only does this expose the secret value to Buildkite, but pipeline settings are often returned in REST and GraphQL API payloads.

<section class="Docs__note">
  <p>Never store secret values in your Buildkite pipeline settings.</p>
</section>

## Anti-pattern: Storing secrets in your pipeline.yml

You should never store secrets in the `env` block at the top of your pipeline steps, whether it's in a `pipeline.yml` file or the YAML steps editor. 

```yml
env:
  # Security risk! The secret will be sent to and stored by Buildkite, and
  # be available in the "Uploaded Pipelines" list in the job’s Timeline tab.
  GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN: "bd0fa963610b..."

steps:
  - command: scripts/trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

<section class="Docs__note">
  <p>Never store secrets in the <code>env</code> section of your pipeline.</p>
</section>

## Anti-pattern: Referencing secrets in your pipeline YAML

You should never refer to secrets directly in your `pipeline.yml` file, as they may be interpolated during the [pipeline upload](/docs/agent/v3/cli-pipeline#uploading-pipelines) and sent to Buildkite. For example:

```yaml
steps:
  # Security risk! The environment variable containing the secret will be
  # interpolated into the YAML file and then sent to Buildkite.
  - command: |
      curl \
        --header "Authorization: token $GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
        --request POST \
        --data "{\"ref\": \"$BUILDKITE_COMMIT\"}" \
        https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="pipeline.yml"}

Referencing secrets in your steps risks them being interpolated, uploaded to Buildkite, and shown in plain text in the "Uploaded Pipelines" list in the job’s Timeline tab.

To prevent the risk of interpolation, it is recommended that you replace the command block with a script in your repository, for example:

```yml
steps:
  - command: scripts/trigger-github-deploy
```
{: codeblock-file="pipeline.yml"}

<section class="Docs__note">
  <p>Use <a href="/docs/pipelines/writing-build-scripts">build scripts</a> instead of <code>command</code> blocks for steps that use secrets.</p>
</section>

If you must define your script in your steps, you can prevent interpolation by using the `$$` syntax:

```yml
steps:
  # By using $$ the value of the secret is never sent to Buildkite. This is
  # still not best practice, as it's easy to forget the additional $ character
  # and expose the secret.
  - command: |
      curl \
        --header "Authorization: token $$GITHUB_MY_APP_DEPLOYMENT_ACCESS_TOKEN" \
        --request POST \
        --data "{\"ref\": \"$$BUILDKITE_COMMIT\"}" \
        https://api.github.com/repos/my-org/my-app/deployments
```
{: codeblock-file="pipeline.yml"}

## Two-Factor Authentication

Two-factor authentication (2FA) can be added to provide an additional layer of security to your Buildkite account and make sure you're the only person who has access to handling your builds. Once 2FA is enabled on your Buildkite account, the only way to login to your account is by knowing both your password and a unique code generated by a third-party application such as [1Password], [OTP Auth], [Duo Mobile], [Authy], or [Google Authenticator].

You can set up two-factor authentication in the Buildkite dashboard. To do it, click your profile picture and select Personal Settings in the drop-down menu. 

<%= image "2fa-1.png", width: 710, height: 262, alt: "Screenshot of Personal Settings Button" %>

Next, navigate to the Two-Factor Authentication tab and click it (you may be asked to enter your password in the Confirm Password field).
<%= image "2fa-3.png", width: 380, height: 238, alt: "Screenshot of Password Confirmation" %>
<br>
Enter your Buildkite account password and proceed.
<%= image "2fa-2.png", width: 850, height: 372, alt: "Screenshot of Accessing Two-Factor Authentication" %>

Click the Setup Two-Factor Authentication button to start securing your Buildkite account. 
<%= image "2fa-4.png", width: 1172, height: 480, alt: "Screenshot of Setup Button for Two-Factor Authentication" %>

**Step 1: Store recovery codes.**  
You will need them in case you lose access to your authenticator application to restore access to your account. Use the buttons to either copy the codes to Clipboard or download them as a text file. Keep your recovery codes in a safe digital space or print them out and hide them well. Never share your recovery codes. 

<%= image "2fa-5.png", width: 606, height: 732, alt: "Screenshot of Recovery Codes for Two-Factor Authentication" %>

Once you've saved your recovery codes, click Next.

**Step 2: Configure Authenticator Application**  
To activate two-factor authentication, scan the barcode that appears in the Buildkite dashboard with the authenticator application of your choice. If you cannot scan the barcode, you can use the secret key below the barcode.

After you've scanned the barcode or activated the authenticator application using the secret key, Buildkite will appear on the list of accounts registered in that application. Your authenticator will provide a new randomly generated six-digit code (your One Time Pass) roughly every 30 seconds. Enter this code into the corresponding field in the Buildkite app and click Activate. 

<%= image "2fa-6.png", width: 604, height: 728, alt: "Screenshot of Barcode and Secret Key for Two-Factor Authenticator" %>

Congratulations! You have now successfully enabled the two-factor authentication for your Buildkite account. This will be confirmed by an 'Enabled' badge next to the Two-Factor Authentication option in your Personal Settings. 

<%= image "2fa-7.png", width: 1172, height: 350, alt: "Screenshot of Two-Factor Authentication Enabled Badge" %>

Next time you try to log into your Buildkite account from a new browser, device, or location, you will be asked to enter the current One Time Password provided by your authentication app.

You can always reconfigure or deactivate the 2FA if you need to. This can be done in the Two-Factor Authentication tab in Personal Settings for your Buildkite account in the dashboard.  

[1Password]: <https://support.1password.com/one-time-passwords/>
[OTP Auth]: <https://cooperrs.de/otpauth.html>
[Authy]: <https://authy.com/>
[Duo Mobile]: <duo.com/product/multi-factor-authentication-mfa/two-factor-authentication-2fa>
[Google Authenticator]: <https://www.google.com/landing/2step/>


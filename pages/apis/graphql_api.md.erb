# GraphQL API Overview

The Buildkite GraphQL API provides an alternative to the [REST API](/docs/rest-api). It allows for more efficient retrieval of data by enabling you to fetch multiple, nested resources in a single request. The Buildkite GraphQL API is currently in beta.

<%= toc %>

## Getting started

The quickest way to get started with the GraphQL API is to generate an <a href="<%= url_helpers.user_access_tokens_url %>" rel="nofollow">API Access Token</a> with GraphQL scope, and then use the [GraphQL Explorer](https://graphql.buildkite.com/explorer) with its built-in documentation:

<a href="https://graphql.buildkite.com/explorer"><%= image "explorer.png", width: 1065, height: 489, alt: "Screenshot of the Buildkite GraphQL Explorer" %></a>

See our [Getting Started Tutorial](https://building.buildkite.com/tutorial-getting-started-with-graphql-queries-and-mutations-11211dfe5d64) for a step-by-step guide to using GraphQL queries and mutations.

## Endpoint

The GraphQL API endpoint is `https://graphql.buildkite.com/v1`. All requests must be HTTP `POST` requests with `application/json` encoded bodies.

## Authentication

GraphQL requests must be authenticated using an <a href="<%= url_helpers.user_access_tokens_url %>" rel="nofollow">API Access Token</a> with the GraphQL scope enabled. Pass the token in your GraphQL request using the `Authorization` HTTP header with a value `Bearer <token>`.

For example:

```bash
curl -H "Authorization: Bearer $TOKEN" https://graphql.buildkite.com/v1
```

## Performing requests with curl

A GraphQL request is a standard HTTPS POST request, with a JSON-encoded body containing a `"query"` key, and optionally a `"variables"` key.

For example, the following `curl` command returns the `name` property of the current `viewer`:

```bash
curl https://graphql.buildkite.com/v1 \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "query": "{ viewer { user { name } } }",
    "variables": "{ }"
  }'
```

```json
{
  "data": {
    "viewer": {
      "user": {
        "name": "Jane Doe"
      }
    }
  }
}
```

For documentation on the full list of fields and types, see the interactive documentation in the [GraphQL Explorer](#getting-started).

## GraphQL IDs

All node types have an `id` property, which is a global identifier encoding the object’s type and UUID. Buildkite’s GraphQL IDs are based on the [Relay Global Object ID](https://facebook.github.io/relay/graphql/objectidentification.htm).

For example, this is how to find the GraphQL ID of an organization:

```graphql
query {
  organization(slug: "myorg") {
    id
  }
}
```

```json
{
  "data": {
    "organization": {
      "id": "T3JnYW5pemF0aW9uLS0tYTk4OTYxYjctYWRjMS00MWFhLTg3MjYtY2ZiMmM0NmU0MmUw"
    }
  }
}
```

If you have a GraphQL ID, you can use it with the global `node` query. You’ll need to specify the type using an [Inline Fragment](https://graphql.org/learn/queries/#inline-fragments) to access type-specific properties.

For example, the following query returns the organization’s pipeline count:

```graphql
query {
  node(id: "T3JnYW5pemF0aW9uLS0tYTk4OTYxYjctYWRjMS00MWFhLTg3MjYtY2ZiMmM0NmU0MmUw") {
    ... on Organization {
      pipelines {
        count
      }
    }
  }
}
```

```json
{
  "data": {
    "node": {
      "pipelines": {
        "count": 42
      }
    }
  }
}
```

## Relay compatibility

The Buildkite GraphQL API adheres to the [Relay Specification](https://facebook.github.io/relay/docs/en/graphql-server-specification.html), which defines standards for querying [paginated collections](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#connections) ("Connections" and "Edges"), [identifying objects](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#object-identification) directly from the root of a query (avoiding long nested queries), and for providing [mutation input data](https://facebook.github.io/relay/docs/en/graphql-server-specification.html#mutations).

## Learning more about GraphQL

Further resources for learning more about GraphQL:

* Our [Getting Started with GraphQL Queries and Mutations](https://building.buildkite.com/tutorial-getting-started-with-graphql-queries-and-mutations-11211dfe5d64) tutorial
* [graphql.org/learn](http://graphql.org/learn/) — The Learn section of the official GraphQL website
* [github.com/buildkite/frontend](https://github.com/buildkite/frontend) — Buildkite’s web interface makes extensive use of the GraphQL API

